Index: ui_functions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ui_functions.py b/Ui/ui_functions.py
rename from ui_functions.py
rename to Ui/ui_functions.py
--- a/ui_functions.py	(revision e7aa5931294875417ca4344f4f8f31b388789013)
+++ b/Ui/ui_functions.py	(date 1671638063079)
@@ -3,7 +3,7 @@
 
 from main import *
 
-from ui_main import *
+from Ui.ui_main import *
 
 
 class UIFunctions(MainWindow):
Index: ui_task_card.py
===================================================================
diff --git a/ui_task_card.py b/ui_task_card.py
deleted file mode 100644
--- a/ui_task_card.py	(revision e7aa5931294875417ca4344f4f8f31b388789013)
+++ /dev/null	(revision e7aa5931294875417ca4344f4f8f31b388789013)
@@ -1,164 +0,0 @@
-from PyQt5 import QtCore, QtGui, QtWidgets
-from PyQt5.QtWidgets import QLineEdit
-
-class ui_task(object):
-    def setupUi(self, Form):
-        if not Form.objectName():
-            Form.setObjectName(u"Form")
-        Form.resize(1390, 148)
-        self.Task_form = QtWidgets.QFrame(Form)
-        self.Task_form.setObjectName(u"Task_form")
-        self.Task_form.setGeometry(QtCore.QRect(10, 0, 1281, 122))
-        self.Task_form.setMinimumSize(QtCore.QSize(1281, 122))
-        self.Task_form.setMaximumSize(QtCore.QSize(1281, 122))
-        self.Task_form.setStyleSheet(u"background-color: rgb(36, 37, 39);\n"
-"border-style:solid ;\n"
-"    border-width: 2px;\n"
-"    border-color: rgb(123, 115, 27);\n"
-"border-radius: 15px;")
-        self.Task_form.setFrameShape(QtWidgets.QFrame.StyledPanel)
-        self.Task_form.setFrameShadow(QtWidgets.QFrame.Raised)
-        self.Task_text = QtWidgets.QTextBrowser(self.Task_form)
-        self.Task_text.setObjectName(u"Task_text")
-        self.Task_text.setGeometry(QtCore.QRect(80, 10, 1061, 41))
-        self.Task_text.setStyleSheet(u"text-align: center;\n"
-"font-family: Myriad Pro;\n"
-"color: rgb(123, 115, 27);\n"
-"font-size:25px;;\n"
-"background-color: rgb(36, 37, 39);\n"
-"text-decorations: none;\n"
-"border-style:none ;")
-        self.Priority = QtWidgets.QTextBrowser(self.Task_form)
-        self.Priority.setObjectName(u"Priority")
-        self.Priority.setGeometry(QtCore.QRect(60, 70, 111, 41))
-        self.Priority.setStyleSheet(u"text-align: center;\n"
-"font-family: Myriad Pro;\n"
-"color: rgb(123, 115, 27);\n"
-"font-size:25px;;\n"
-"background-color: rgb(36, 37, 39);\n"
-"text-decorations: none;\n"
-"border-style:none ;")
-        self.Priority.setAutoFormatting(QtWidgets.QTextEdit.AutoNone)
-        self.Exucutor_id = QtWidgets.QTextBrowser(self.Task_form)
-        self.Exucutor_id.setObjectName(u"Exucutor_id")
-        self.Exucutor_id.setGeometry(QtCore.QRect(520, 70, 121, 41))
-        self.Exucutor_id.setStyleSheet(u"text-align: center;\n"
-"font-family: Myriad Pro;\n"
-"color: rgb(123, 115, 27);\n"
-"font-size:25px;;\n"
-"background-color: rgb(36, 37, 39);\n"
-"text-decorations: none;\n"
-"border-style:none ;")
-        self.Task_id = QtWidgets.QTextBrowser(self.Task_form)
-        self.Task_id.setObjectName(u"Task_id")
-        self.Task_id.setGeometry(QtCore.QRect(10, 10, 51, 41))
-        self.Task_id.setStyleSheet(u"text-align: center;\n"
-"font-family: Myriad Pro;\n"
-"color: rgb(123, 115, 27);\n"
-"font-size:25px;;\n"
-"background-color: rgb(36, 37, 39);\n"
-"text-decorations: none;\n"
-"border-style:none ;")
-        self.Deadline = QtWidgets.QTextBrowser(self.Task_form)
-        self.Deadline.setObjectName(u"Deadline")
-        self.Deadline.setGeometry(QtCore.QRect(1020, 70, 250, 41))
-        self.Deadline.setStyleSheet(u"text-align: center;\n"
-"font-family: Myriad Pro;\n"
-"color: rgb(123, 115, 27);\n"
-"font-size:25px;;\n"
-"background-color: rgb(36, 37, 39);\n"
-"text-decorations: none;\n"
-"border-style:none ;")
-        self.Deadline.setAutoFormatting(QtWidgets.QTextEdit.AutoNone)
-        self.Task_Status = QtWidgets.QTextBrowser(self.Task_form)
-        self.Task_Status.setObjectName(u"Task_Status")
-        self.Task_Status.setGeometry(QtCore.QRect(1120, 10, 111, 41))
-        self.Task_Status.setStyleSheet(u"text-align: center;\n"
-"font-family: Myriad Pro;\n"
-"color: rgb(123, 115, 27);\n"
-"font-size:25px;;\n"
-"background-color: rgb(36, 37, 39);\n"
-"text-decorations: none;\n"
-"border-style:none ;")
-        self.Task_Status.setAutoFormatting(QtWidgets.QTextEdit.AutoNone)
-        self.Priority_number = QtWidgets.QTextBrowser(self.Task_form)
-        self.Priority_number.setObjectName(u"Priority_number")
-        self.Priority_number.setGeometry(QtCore.QRect(180, 70, 51, 41))
-        self.Priority_number.setStyleSheet(u"text-align: center;\n"
-"font-family: Myriad Pro;\n"
-"color: rgb(123, 115, 27);\n"
-"font-size:25px;;\n"
-"background-color: rgb(36, 37, 39);\n"
-"text-decorations: none;\n"
-"border-style:none ;")
-        self.Executor_number = QtWidgets.QTextBrowser(self.Task_form)
-        self.Executor_number.setObjectName(u"Executor_number")
-        self.Executor_number.setGeometry(QtCore.QRect(650, 70, 51, 41))
-        self.Executor_number.setStyleSheet(u"text-align: center;\n"
-"font-family: Myriad Pro;\n"
-"color: rgb(123, 115, 27);\n"
-"font-size:25px;;\n"
-"background-color: rgb(36, 37, 39);\n"
-"text-decorations: none;\n"
-"border-style:none ;")
-        self.Change_task = QtWidgets.QPushButton(self.Task_form)
-        self.Change_task.setObjectName(u"Change_task")
-        self.Change_task.setGeometry(QtCore.QRect(10, 70, 41, 41))
-        self.Change_task.setAutoFillBackground(False)
-        self.Change_task.setStyleSheet(u"background-color: rgb(123, 115, 27);\n"
-"border-radius: 20px;")
-        icon = QtGui.QIcon()
-        icon.addFile(u"C:/Users/gosha/PycharmProjects/Just Notes/Source/Settings.png", QtCore.QSize(), QtGui.QIcon.Normal, QtGui.QIcon.Off)
-        self.Change_task.setIcon(icon)
-        self.Change_task.setIconSize(QtCore.QSize(25, 25))
-
-        self.retranslateUi(Form)
-
-        QtCore.QMetaObject.connectSlotsByName(Form)
-    # setupUi
-
-    def retranslateUi(self, Form):
-        Form.setWindowTitle(QtCore.QCoreApplication.translate("Form", u"Form", None))
-        self.Task_text.setHtml(QtCore.QCoreApplication.translate("Form", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
-"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
-"p, li { white-space: pre-wrap; }\n"
-"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
-"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">Name</span></p></body></html>", None))
-        self.Priority.setHtml(QtCore.QCoreApplication.translate("Form", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
-"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
-"p, li { white-space: pre-wrap; }\n"
-"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
-"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">Priority</span></p></body></html>", None))
-        self.Exucutor_id.setHtml(QtCore.QCoreApplication.translate("Form", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
-"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
-"p, li { white-space: pre-wrap; }\n"
-"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
-"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Tahoma'; font-size:16pt;\">Executor ID</span></p></body></html>", None))
-        self.Task_id.setHtml(QtCore.QCoreApplication.translate("Form", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
-"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
-"p, li { white-space: pre-wrap; }\n"
-"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
-"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">ID</span></p></body></html>", None))
-        self.Deadline.setHtml(QtCore.QCoreApplication.translate("Form", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
-"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
-"p, li { white-space: pre-wrap; }\n"
-"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
-"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">Deadline</span></p></body></html>", None))
-        self.Task_Status.setHtml(QtCore.QCoreApplication.translate("Form", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
-"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
-"p, li { white-space: pre-wrap; }\n"
-"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
-"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">Status</span></p></body></html>", None))
-        self.Priority_number.setHtml(QtCore.QCoreApplication.translate("Form", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
-"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
-"p, li { white-space: pre-wrap; }\n"
-"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
-"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">ID</span></p></body></html>", None))
-        self.Executor_number.setHtml(QtCore.QCoreApplication.translate("Form", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
-"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
-"p, li { white-space: pre-wrap; }\n"
-"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
-"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">ID</span></p></body></html>", None))
-        self.Change_task.setText("")
-    # retranslateUi
-
Index: database.py
===================================================================
diff --git a/database.py b/database.py
deleted file mode 100644
--- a/database.py	(revision e7aa5931294875417ca4344f4f8f31b388789013)
+++ /dev/null	(revision e7aa5931294875417ca4344f4f8f31b388789013)
@@ -1,17 +0,0 @@
-
-
-# # Получение должности по id сотрудника
-# def get_job_title_by_employee_id(employee_id: int):
-#         with connection.cursor() as cursor:
-#                 try:
-#                         query_str = f'SELECT job_title FROM public.employee WHERE employee_id = {employee_id}'
-#                         cursor.execute(query_str)
-#                         filtered_employees = cursor.fetchall()
-#
-#                         print(f'role of employee: {filtered_employees[0]}')
-#
-#                 except Exception as _ex:
-#                         print("[INFO] Error.get_job_title_by_employee_id error. Reason: ", _ex)
-
-
-
Index: noteWidget.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import datetime\r\nfrom PyQt5 import QtCore\r\nimport PySide6\r\nimport psycopg2\r\nfrom PyQt5.QtWidgets import QWidget, QMainWindow\r\nfrom PySide6.QtCore import Slot, Signal\r\n\r\nimport config\r\nimport hashlib\r\nimport json\r\n\r\nimport main\r\nfrom changeTask import *\r\nfrom main import *\r\nfrom ui_task_card import ui_task\r\nfrom Ui_company import Ui_clientcard\r\nfrom Ui_employee import Ui_usercard\r\nfrom add_client import Ui_add_client\r\nfrom add_task import Ui_add_task\r\nfrom company_filters import Ui_CLients_filters\r\nfrom employee_filters import Ui_Employee_filters\r\nfrom tasks_filrers import Ui_tasks_filters\r\nfrom ui_download import Ui_Download_window\r\nfrom ui_registration import Ui_Registration\r\nfrom widget_classes import *\r\n\r\n\r\nclass change(QMainWindow, Ui_change_task):\r\n\tdef __init__(self, parent=None):\r\n\t\tsuper(change, self).__init__(parent)\r\n\t\tself.setupUi(self)\r\n\t\tself.parent = parent\r\n\t\tUi_Change_Task_functions.ui_change_func(self)\r\n\t\tself.Contract_id.setText(str(self.parent.Priority))\r\n\t\tself.Task_id.setText(str(self.parent.executor_id))\r\n\t\tself.Priority.setText(str(self.parent.status))\r\n\t\tself.dateTimeEdit.setDate(tasks[self.parent.id - 1].deadline)\r\n\t\tif current_user.id != tasks[self.parent.number].executor_id and current_user.id != tasks[\r\n\t\t\tself.parent.number].author_id and not current_user.login == \"postgres\": self.dateTimeEdit.hide(), self.Priority.hide()\r\n\t\tif current_user.role == \"employee\": self.Task_id.hide()\r\n\r\n\tdef set(self):\r\n\t\tself.parent.Priority = self.Contract_id.text()\r\n\t\tself.parent.executor_id = self.Task_id.text()\r\n\t\tself.parent.status = self.Priority.text()\r\n\t\tself.parent.deadline = self.dateTimeEdit.text()\r\n\r\n\t\tself.parent.Priority_number.setPlainText(str(self.parent.Priority))\r\n\t\tself.parent.Executor_number.setPlainText(str(self.parent.executor_id))\r\n\t\tself.parent.Deadline.setPlainText(str(self.parent.deadline))\r\n\t\tself.parent.Task_Status.setPlainText(self.parent.status)\r\n\r\n\t\ttasks[self.parent.id - 1].deadline = self.dateTimeEdit.date()\r\n\t\ttasks[self.parent.id - 1].executor_id = int(self.parent.executor_id)\r\n\t\ttasks[self.parent.id - 1].Priority = int(self.parent.Priority)\r\n\t\ttasks[self.parent.id - 1].status = str(self.parent.status)\r\n\r\n\t\tif (self.parent.status == \"Finished\" or self.parent.status == \"finished\"):\r\n\t\t\tself.parent.Change_task.hide()\r\n\r\n\t\ttry:\r\n\t\t\tconnection = psycopg2.connect(\r\n\t\t\t\thost=config.host,\r\n\t\t\t\tuser=current_user.login,\r\n\t\t\t\tpassword=current_user.password,\r\n\t\t\t\tdatabase=config.db_name\r\n\t\t\t)\r\n\t\t\tconnection.autocommit = True\r\n\t\t\twith connection.cursor() as cursor:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tcursor.execute(\r\n\t\t\t\t\t\tf'UPDATE task SET deadline = \\'{self.parent.deadline}\\',executor_employee_id = {tasks[self.parent.id - 1].executor_id},priority = {tasks[self.parent.id - 1].Priority}, status = \\'{tasks[self.parent.id - 1].status}\\' WHERE task_id = {self.parent.id}')\r\n\t\t\t\t\tprint('Task updated succesfully')\r\n\t\t\t\texcept Exception as _ex:\r\n\t\t\t\t\tprint(\"[INFO] Error. New task not added. Reason: \", _ex)\r\n\r\n\t\texcept Exception as _ex:\r\n\t\t\tprint(\"[INFO] Error while working with PostgreSQL\", _ex)\r\n\r\n\t\tself.close()\r\n\r\n\r\nclass Ui_Change_Task_functions(change):\r\n\tdef ui_change_func(self):\r\n\t\tself.search.clicked.connect(self.set)\r\n\r\n\r\nclass task_card(QMainWindow, ui_task):\r\n\tdef __init__(self, parent=None):\r\n\t\tsuper(task_card, self).__init__(parent)\r\n\t\tself.setupUi(self)\r\n\t\tUi_Task_Card_functions.ui_task_card_f(self)\r\n\r\n\t\tself.id = 0\r\n\t\tself.text = \"\"\r\n\t\tself.Priority = 0\r\n\t\tself.executor_id = 0\r\n\t\tself.deadline = \"\"\r\n\t\tself.status = \"\"\r\n\t\tself.number = 0\r\n\r\n\tdef set(self):\r\n\t\tself.Task_text.setPlainText(self.text)\r\n\t\tself.Priority_number.setPlainText(str(self.Priority))\r\n\t\tself.Executor_number.setPlainText(str(self.executor_id))\r\n\t\tself.Task_id.setPlainText(str(self.id))\r\n\t\tself.Deadline.setPlainText(str(self.deadline))\r\n\t\tself.Task_Status.setPlainText(self.status)\r\n\r\n\t\tif (self.status == \"Finished\" or self.status == \"finished\"):\r\n\t\t\tself.Change_task.hide()\r\n\r\n\tdef openChange(self):\r\n\t\tself.w7 = change(self)\r\n\t\tself.w7.show()\r\n\r\n\r\nclass Ui_Task_Card_functions(task_card):\r\n\tdef ui_task_card_f(self):\r\n\t\tself.Change_task.clicked.connect(self.openChange)\r\n\r\n\r\nclass client_card(QMainWindow, Ui_clientcard):\r\n\tdef __init__(self):\r\n\t\tsuper(client_card, self).__init__()\r\n\t\tself.setupUi(self)\r\n\r\n\t\tself.id = 0\r\n\t\tself.title = \"\"\r\n\t\tself.city = \"\"\r\n\t\tself.phone = \"\"\r\n\t\tself.email = \"\"\r\n\t\tself.number = 0\r\n\r\n\tdef set(self):\r\n\t\tself.Email_text.setPlainText(str(self.id))\r\n\t\tself.Email_text_2.setPlainText(self.title)\r\n\t\tself.Phone_text.setPlainText(str(self.city))\r\n\t\tself.Name_text.setPlainText(str(self.phone))\r\n\t\tself.Role_text.setPlainText(str(self.email))\r\n\r\n\r\nclass task_filter(QMainWindow):\r\n\tdef __init__(self, parent=None):\r\n\t\tsuper(task_filter, self).__init__(parent)\r\n\t\tself.setWindowTitle(\"Login\")\r\n\t\tself.ui = Ui_tasks_filters()\r\n\t\tself.ui.setupUi(self)\r\n\t\tself.parent = parent\r\n\t\tUi_task_filter_window.ui_tfilter_func(self)\r\n\r\n\tdef filter_tasks(self):\r\n\t\ttry:\r\n\t\t\tconnection = psycopg2.connect(\r\n\t\t\t\thost=config.host,\r\n\t\t\t\tuser=current_user.login,\r\n\t\t\t\tpassword=current_user.password,\r\n\t\t\t\tdatabase=config.db_name\r\n\t\t\t)\r\n\t\t\tconnection.autocommit = True\r\n\t\t\twith connection.cursor() as cursor:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tquery_str = f'SELECT * FROM task'\r\n\t\t\t\t\ts = 0\r\n\t\t\t\t\tif self.ui.Author_id.text() != \"\":\r\n\t\t\t\t\t\tquery_str += f' WHERE author_employee_id = {int(self.ui.Author_id.text())}'\r\n\t\t\t\t\t\ts += 1\r\n\t\t\t\t\tif self.ui.Executor_id.text() != \"\":\r\n\t\t\t\t\t\tif s == 0:\r\n\t\t\t\t\t\t\tquery_str += f' WHERE executor_employee_id = {int(self.ui.Executor_id.text())}'\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\tquery_str += f' AND executor_employee_id = {int(self.ui.Executor_id.text())}'\r\n\t\t\t\t\t\ts += 1\r\n\t\t\t\t\tif self.ui.Task_id.text() != \"\":\r\n\t\t\t\t\t\tif s == 0:\r\n\t\t\t\t\t\t\tquery_str += f' WHERE task_id = {int(self.ui.Task_id.text())}'\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\tquery_str += f' AND task_id = {int(self.ui.Task_id.text())}'\r\n\t\t\t\t\t\ts += 1\r\n\t\t\t\t\tif self.ui.Priority.text() != \"\":\r\n\t\t\t\t\t\tif s == 0:\r\n\t\t\t\t\t\t\tquery_str += f' WHERE priority = {int(self.ui.Priority.text())}'\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\tquery_str += f' AND priority = {int(self.ui.Priority.text())}'\r\n\t\t\t\t\t\ts += 1\r\n\t\t\t\t\tif self.ui.Status.text() != \"\":\r\n\t\t\t\t\t\tif s == 0:\r\n\t\t\t\t\t\t\tquery_str += f' WHERE status = {self.ui.Status.text()}'\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\tquery_str += f' AND status = {self.ui.Status.text()}'\r\n\t\t\t\t\t\ts += 1\r\n\t\t\t\t\tif self.ui.Contract_id.text() != \"\":\r\n\t\t\t\t\t\tif s == 0:\r\n\t\t\t\t\t\t\tquery_str += f' WHERE contract_id = {int(self.ui.Contract_id.text())}'\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\tquery_str += f' AND contract_id = {int(self.ui.Contract_id.text())}'\r\n\t\t\t\t\t\ts += 1\r\n\r\n\t\t\t\t\tftasks.clear()\r\n\t\t\t\t\tcursor.execute(query_str)\r\n\t\t\t\t\tfiltered_tasks = cursor.fetchall()\r\n\r\n\t\t\t\t\tprint('Filtered tasks:')\r\n\t\t\t\t\tfor row in filtered_tasks:\r\n\t\t\t\t\t\tprint(\"deadline = \", row[0], )\r\n\t\t\t\t\t\tprint(\"appointment_date = \", row[1])\r\n\t\t\t\t\t\tprint(\"executor_employee_id = \", row[2])\r\n\t\t\t\t\t\tprint(\"author_employee_id = \", row[3])\r\n\t\t\t\t\t\tprint(\"task_id = \", row[4])\r\n\t\t\t\t\t\tprint(\"task_description = \", row[5])\r\n\t\t\t\t\t\tprint(\"priority = \", row[6])\r\n\t\t\t\t\t\tprint(\"status = \", row[7])\r\n\t\t\t\t\t\tprint(\"contract_id = \", row[8], \"\\n\")\r\n\t\t\t\t\t\tformat = \"dd.MM.yyyy\"\r\n\t\t\t\t\t\ttempdate = PyQt5.QtCore.QDate.fromString(row[8], format)\r\n\t\t\t\t\t\ttask = Task(row[2], row[3], tempdate, row[1], row[0], row[6], row[4], row[5])\r\n\t\t\t\t\t\tftasks.append(task)\r\n\r\n\t\t\t\t\tfor i in range(len(tasks_cards)):\r\n\t\t\t\t\t\ttasks_cards[i].deleteLater()\r\n\t\t\t\t\ttasks_cards.clear()\r\n\r\n\t\t\t\t\tfor i in range(len(ftasks)):\r\n\t\t\t\t\t\ttasskCard = task_card()\r\n\r\n\t\t\t\t\t\ttasskCard.setFixedHeight(122)\r\n\t\t\t\t\t\ttasskCard.text = ftasks[i].text\r\n\t\t\t\t\t\ttasskCard.id = ftasks[i].id\r\n\t\t\t\t\t\ttasskCard.deadline = ftasks[i].deadline.toString('yyyy.MM.dd')\r\n\t\t\t\t\t\ttasskCard.status = ftasks[i].status\r\n\t\t\t\t\t\ttasskCard.Priority = ftasks[i].Priority\r\n\t\t\t\t\t\ttasskCard.executor_id = ftasks[i].executor_id\r\n\t\t\t\t\t\ttasskCard.set()\r\n\r\n\t\t\t\t\t\ttasks_cards.append(tasskCard)\r\n\t\t\t\t\tmain.MainWindow.AddTVert(self.parent, tasks_cards[i])\r\n\r\n\t\t\t\texcept Exception as _ex:\r\n\t\t\t\t\tprint(\"[INFO] Error. Task filter error. Reason: \", _ex)\r\n\t\texcept Exception as _ex:\r\n\t\t\tprint(\"[INFO] Error. Task filter error. Reason: \", _ex)\r\n\r\n\r\nclass Ui_task_filter_window(task_filter):\r\n\tdef ui_tfilter_func(self):\r\n\t\tself.ui.search.clicked.connect(self.filter_tasks)\r\n\r\n\r\nclass company_filter(QMainWindow):\r\n\tdef __init__(self, parent=None):\r\n\t\tsuper(company_filter, self).__init__(parent)\r\n\t\tself.setWindowTitle(\"Login\")\r\n\t\tself.ui = Ui_CLients_filters()\r\n\t\tself.ui.setupUi(self)\r\n\t\tself.parent = parent\r\n\t\tUi_company_filter_window.ui_cfilter_func(self)\r\n\r\n\tdef filter_client(self):\r\n\t\ttry:\r\n\t\t\tconnection = psycopg2.connect(\r\n\t\t\t\thost=config.host,\r\n\t\t\t\tuser=current_user.login,\r\n\t\t\t\tpassword=current_user.password,\r\n\t\t\t\tdatabase=config.db_name\r\n\t\t\t)\r\n\t\t\tconnection.autocommit = True\r\n\r\n\t\t\twith connection.cursor() as cursor:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tquery_str = f'SELECT * FROM client'\r\n\t\t\t\t\ts = 0\r\n\t\t\t\t\tif self.ui.company_name.text() != \"\":\r\n\t\t\t\t\t\tquery_str += f' WHERE company_name = \\'{self.ui.company_name.text()}\\''\r\n\t\t\t\t\t\ts += 1\r\n\t\t\t\t\tif self.ui.city.text() != \"\":\r\n\t\t\t\t\t\tif s == 0:\r\n\t\t\t\t\t\t\tquery_str += f' WHERE registration_city = \\'{self.ui.city.text()}\\''\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\tquery_str += f' AND registration_city = \\'{self.ui.city.text()}\\''\r\n\t\t\t\t\t\ts += 1\r\n\t\t\t\t\tif self.ui.email.text() != \"\":\r\n\t\t\t\t\t\tif s == 0:\r\n\t\t\t\t\t\t\tquery_str += f' WHERE email = \\'{self.ui.email.text()}\\''\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\tquery_str += f' AND email = \\'{self.ui.email.text()}\\''\r\n\t\t\t\t\t\ts += 1\r\n\t\t\t\t\tif self.ui.phone.text() != \"\":\r\n\t\t\t\t\t\tif s == 0:\r\n\t\t\t\t\t\t\tquery_str += f' WHERE phone_number = {int(self.ui.phone.text())}'\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\tquery_str += f' AND phone_number = {int(self.ui.phone.text())}'\r\n\t\t\t\t\t\ts += 1\r\n\r\n\t\t\t\t\tfclients.clear()\r\n\t\t\t\t\tcursor.execute(query_str)\r\n\t\t\t\t\tfiltered_clients = cursor.fetchall()\r\n\r\n\t\t\t\t\tprint('Filtered tasks:')\r\n\t\t\t\t\tfor row in filtered_clients:\r\n\t\t\t\t\t\tfclient = Client(row[0], row[3], row[1], row[2], row[4])\r\n\t\t\t\t\t\tfclients.append(fclient)\r\n\r\n\t\t\t\t\tfor i in range(len(clients_cards)):\r\n\t\t\t\t\t\tclients_cards[i].deleteLater()\r\n\t\t\t\t\tclients_cards.clear()\r\n\r\n\t\t\t\t\tfor i in range(len(fclients)):\r\n\t\t\t\t\t\tclientCard = client_card()\r\n\r\n\t\t\t\t\t\tclientCard.setFixedHeight(122)\r\n\t\t\t\t\t\tclientCard.id = fclients[i].id\r\n\t\t\t\t\t\tclientCard.title = fclients[i].title\r\n\t\t\t\t\t\tclientCard.phone = fclients[i].phone\r\n\t\t\t\t\t\tclientCard.email = fclients[i].email\r\n\t\t\t\t\t\tclientCard.city = fclients[i].city\r\n\t\t\t\t\t\tclientCard.set()\r\n\r\n\t\t\t\t\t\tclients_cards.append(clientCard)\r\n\r\n\t\t\t\t\t\tmain.MainWindow.AddTVert(self.parent, clients_cards[i])\r\n\r\n\t\t\t\texcept Exception as _ex:\r\n\t\t\t\t\tprint(\"[INFO] Error. Client filter error. Reason: \", _ex)\r\n\t\texcept Exception as _ex:\r\n\t\t\tprint(\"[INFO] Error. Client filter error. Reason: \", _ex)\r\n\r\n\r\nclass Ui_company_filter_window(company_filter):\r\n\tdef ui_cfilter_func(self):\r\n\t\tself.ui.search.clicked.connect(self.filter_client)\r\n\r\n\r\nclass employee_filter(QMainWindow):\r\n\tdef __init__(self, parent=None):\r\n\t\tsuper(employee_filter, self).__init__(parent)\r\n\t\tself.setWindowTitle(\"Login\")\r\n\t\tself.ui = Ui_Employee_filters()\r\n\t\tself.ui.setupUi(self)\r\n\t\tself.parent = parent\r\n\t\tUi_employee_filter_window.ui_efilter_func(self)\r\n\r\n\tdef filter_employee(self):\r\n\t\ttry:\r\n\t\t\tconnection = psycopg2.connect(\r\n\t\t\t\thost=config.host,\r\n\t\t\t\tuser=current_user.login,\r\n\t\t\t\tpassword=current_user.password,\r\n\t\t\t\tdatabase=config.db_name\r\n\t\t\t)\r\n\t\t\tconnection.autocommit = True\r\n\t\t\twith connection.cursor() as cursor:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tquery_str = f'SELECT * FROM employee'\r\n\t\t\t\t\ts = 0\r\n\t\t\t\t\tif self.ui.fname.text() != \"\":\r\n\t\t\t\t\t\tquery_str += f' WHERE first_name = \\'{self.ui.fname.text()}\\''\r\n\t\t\t\t\t\ts += 1\r\n\t\t\t\t\tif self.ui.sname.text() != \"\":\r\n\t\t\t\t\t\tif s == 0:\r\n\t\t\t\t\t\t\tquery_str += f' WHERE last_name = \\'{self.ui.sname.text()}\\''\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\tquery_str += f' AND last_name = \\'{self.ui.sname.text()}\\''\r\n\t\t\t\t\t\ts += 1\r\n\t\t\t\t\tif self.ui.pname.text() != \"\":\r\n\t\t\t\t\t\tif s == 0:\r\n\t\t\t\t\t\t\tquery_str += f' WHERE patronymyc = \\'{self.ui.pname.text()}\\''\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\tquery_str += f' AND patronymyc = \\'{self.ui.pname.text()}\\''\r\n\t\t\t\t\t\ts += 1\r\n\t\t\t\t\tif self.ui.phone.text() != \"\":\r\n\t\t\t\t\t\tif s == 0:\r\n\t\t\t\t\t\t\tquery_str += f' WHERE phone_number = {int(self.ui.phone.text())}'\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\tquery_str += f' AND phone_number = {int(self.ui.phone.text())}'\r\n\t\t\t\t\t\ts += 1\r\n\t\t\t\t\tif self.ui.email.text() != \"\":\r\n\t\t\t\t\t\tif s == 0:\r\n\t\t\t\t\t\t\tquery_str += f' WHERE email = \\'{self.ui.email.text()}\\''\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\tquery_str += f' AND email = \\'{self.ui.email.text()}\\''\r\n\t\t\t\t\t\ts += 1\r\n\t\t\t\t\tif self.ui.role.text() != \"\":\r\n\t\t\t\t\t\tif s == 0:\r\n\t\t\t\t\t\t\tquery_str += f' WHERE job_title = \\'{self.ui.role.text()}\\''\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\tquery_str += f' AND job_title = \\'{self.ui.role.text()}\\''\r\n\t\t\t\t\t\ts += 1\r\n\r\n\t\t\t\t\tfemployees.clear()\r\n\t\t\t\t\tcursor.execute(query_str)\r\n\t\t\t\t\tfiltered_employees = cursor.fetchall()\r\n\r\n\t\t\t\t\tprint('Filtered employees:')\r\n\t\t\t\t\tfor row in filtered_employees:\r\n\t\t\t\t\t\tprint(\"job_title = \", row[0], )\r\n\t\t\t\t\t\tprint(\"first_name = \", row[1])\r\n\t\t\t\t\t\tprint(\"last_name = \", row[2])\r\n\t\t\t\t\t\tprint(\"patronymyc = \", row[3])\r\n\t\t\t\t\t\tprint(\"phone_number = \", row[4])\r\n\t\t\t\t\t\tprint(\"email = \", row[5])\r\n\t\t\t\t\t\tprint(\"employee_id = \", row[6])\r\n\t\t\t\t\t\tprint(\"username = \", row[7])\r\n\t\t\t\t\t\tprint(\"password = \", row[8], \"\\n\")\r\n\r\n\t\t\t\t\t\temployee = Employee(row[6], row[0], row[1] + \" \" + row[2] + \" \" + row[3], row[4], row[5])\r\n\t\t\t\t\t\tfemployees.append(employee)\r\n\r\n\t\t\t\t\t\tfor i in range(len(employees_cards)):\r\n\t\t\t\t\t\t\temployees_cards[i].deleteLater()\r\n\t\t\t\t\t\temployees_cards.clear()\r\n\r\n\t\t\t\t\t\tfor i in range(len(femployees)):\r\n\t\t\t\t\t\t\temployee_card = user_card()\r\n\r\n\t\t\t\t\t\t\temployee_card.setFixedHeight(122)\r\n\t\t\t\t\t\t\temployee_card.id = femployees[i].id\r\n\t\t\t\t\t\t\temployee_card.name = femployees[i].name\r\n\t\t\t\t\t\t\temployee_card.phone = femployees[i].phone\r\n\t\t\t\t\t\t\temployee_card.email = femployees[i].email\r\n\t\t\t\t\t\t\temployee_card.role = femployees[i].role\r\n\t\t\t\t\t\t\temployee_card.set()\r\n\r\n\t\t\t\t\t\t\temployees_cards.append(employee_card)\r\n\r\n\t\t\t\t\t\t\tmain.MainWindow.AddTVert(self.parent, employees_cards[i])\r\n\r\n\t\t\t\texcept Exception as _ex:\r\n\t\t\t\t\tprint(\"[INFO] Error. Employee filter error. Reason: \", _ex)\r\n\t\texcept Exception as _ex:\r\n\t\t\tprint(\"[INFO] Error. Employee filter error. Reason: \", _ex)\r\n\r\n\r\nclass Ui_employee_filter_window(employee_filter):\r\n\tdef ui_efilter_func(self):\r\n\t\tself.ui.search.clicked.connect(self.filter_employee)\r\n\r\n\r\nclass DownloadWindow(QWidget):\r\n\tdef __init__(self):\r\n\t\tsuper(DownloadWindow, self).__init__()\r\n\t\tself.setWindowTitle(\"Download\")\r\n\t\tself.ui = Ui_Download_window()\r\n\t\tself.ui.setupUi(self)\r\n\t\tUi_download_window.ui_download_func(self)\r\n\r\n\tdef all_tasks(self):\r\n\t\ttry:\r\n\t\t\tconnection = psycopg2.connect(\r\n\t\t\t\thost=config.host,\r\n\t\t\t\tuser=current_user.login,\r\n\t\t\t\tpassword=current_user.password,\r\n\t\t\t\tdatabase=config.db_name\r\n\t\t\t)\r\n\t\t\tconnection.autocommit = True\r\n\t\t\twith connection.cursor() as cursor:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tcursor.execute(\r\n\t\t\t\t\t\tf'COPY (SELECT json_agg(row_to_json(task)) :: text FROM task) to \\'C:\\DB\\ended_tasks_report.json\\'')\r\n\t\t\t\t\ttasks_report = cursor.fetchall()\r\n\r\n\t\t\t\texcept Exception as _ex:\r\n\t\t\t\t\tprint(\"[INFO] Error. tasks report error. Reason: \", _ex)\r\n\t\texcept Exception as _ex:\r\n\t\t\tprint(\"[INFO] Error while working with PostgreSQL\", _ex)\r\n\r\n\tdef task_by_employee(self):\r\n\t\ttry:\r\n\t\t\tconnection = psycopg2.connect(\r\n\t\t\t\thost=config.host,\r\n\t\t\t\tuser=current_user.login,\r\n\t\t\t\tpassword=current_user.password,\r\n\t\t\t\tdatabase=config.db_name\r\n\t\t\t)\r\n\t\t\tconnection.autocommit = True\r\n\t\t\twith connection.cursor() as cursor:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tcursor.execute(\r\n\t\t\t\t\t\tf'COPY (SELECT json_agg(row_to_json(task)) :: text FROM task WHERE executor_employee_id = \\'{self.ui.task_id_text.text()}\\') to \\'C:\\DB\\employees_report.json\\'')\r\n\t\t\t\t\temployees_report = cursor.fetchall()\r\n\r\n\t\t\t\texcept Exception as _ex:\r\n\t\t\t\t\tprint(\"[INFO] Error. employees report error. Reason: \", _ex)\r\n\r\n\t\texcept Exception as _ex:\r\n\t\t\tprint(\"[INFO] Error while working with PostgreSQL\", _ex)\r\n\t\tfinally:\r\n\t\t\t# if connection:\r\n\t\t\t# \t# cursor.close()\r\n\t\t\t# \tconnection.close()\r\n\t\t\tprint(\"[INFO] PostgreSQL connection closed\")\r\n\r\n\r\nclass Ui_download_window(DownloadWindow):\r\n\tdef ui_download_func(self):\r\n\t\tself.ui.download_all_tasks.clicked.connect(self.all_tasks)\r\n\t\tself.ui.download_tasks_by_employee.clicked.connect(self.task_by_employee)\r\n\r\n\r\nclass add_task(QMainWindow):\r\n\tdef __init__(self, parent=None):\r\n\t\tsuper(add_task, self).__init__(parent)\r\n\t\tself.setWindowTitle(\"Add_task\")\r\n\t\tself.ui = Ui_add_task()\r\n\t\tself.ui.setupUi(self)\r\n\t\tUi_Add_Task_functions.ui_add_func(self)\r\n\t\tself.parent = parent\r\n\t\tif current_user.role == \"employee\": self.ui.Executor_id.hide()\r\n\r\n\tdef addTask(self):\r\n\t\tif current_user.role == \"employee\":\r\n\t\t\texecutor_id = current_user.id\r\n\t\telse:\r\n\t\t\texecutor_id = int(self.ui.Executor_id.text())\r\n\r\n\t\ttry:\r\n\t\t\tconnection = psycopg2.connect(\r\n\t\t\t\thost=config.host,\r\n\t\t\t\tuser=current_user.login,\r\n\t\t\t\tpassword=current_user.password,\r\n\t\t\t\tdatabase=config.db_name\r\n\t\t\t)\r\n\t\t\tconnection.autocommit = True\r\n\t\t\twith connection.cursor() as cursor:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tcursor.execute(f'SELECT task_id FROM task WHERE task_id = (select max(task_id) from task)')\r\n\t\t\t\t\tcontracts = cursor.fetchall()\r\n\t\t\t\t\tidt = 1\r\n\t\t\t\t\tfor row in contracts:\r\n\t\t\t\t\t\tidt += row[0]\r\n\t\t\t\texcept Exception as _ex:\r\n\t\t\t\t\tprint(\"[INFO] Error. clients view error. Reason: \", _ex)\r\n\t\t\t\t\treturn\r\n\t\texcept Exception as _ex:\r\n\t\t\tprint(\"[INFO] Error. clients view error. Reason: \", _ex)\r\n\r\n\t\ttask = Task(idt, str(self.ui.Task_id.text()), self.ui.dateTimeEdit.date(), current_user.id, executor_id,\r\n\t\t\t\t\tint(self.ui.Contract_id.text()), int(self.ui.Priority.text()), str(\"Active\"))\r\n\r\n\t\ttasks.append(task)\r\n\r\n\t\ttaskCard = task_card()\r\n\t\ttaskCard.setFixedHeight(122)\r\n\t\ttaskCard.number = len(tasks) - 1\r\n\t\ttaskCard.text = task.text\r\n\t\ttaskCard.id = task.id\r\n\t\ttaskCard.deadline = self.ui.dateTimeEdit.text()\r\n\t\ttaskCard.status = task.status\r\n\t\ttaskCard.Priority = task.Priority\r\n\t\ttaskCard.executor_id = task.executor_id\r\n\t\ttaskCard.set()\r\n\r\n\t\ttasks_cards.append(taskCard)\r\n\r\n\t\tmain.MainWindow.AddTVert(self.parent, taskCard)\r\n\r\n\t\t###добавить в бд\r\n\r\n\t\tcurrenttime = (QtCore.QDate.currentDate().toString('dd.MM.yyyy'))\r\n\r\n\t\ttry:\r\n\t\t\tconnection = psycopg2.connect(\r\n\t\t\t\thost=config.host,\r\n\t\t\t\tuser=current_user.login,\r\n\t\t\t\tpassword=current_user.password,\r\n\t\t\t\tdatabase=config.db_name\r\n\t\t\t)\r\n\t\t\tconnection.autocommit = True\r\n\t\t\twith connection.cursor() as cursor:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tcursor.execute(\r\n\t\t\t\t\t\tf'INSERT INTO task (deadline, appointent_date, executor_employee_id, author_employee_id, task_description, priority, status, contract_id) VALUES (\\'{(taskCard.deadline)}\\', \\'{currenttime}\\', {task.executor_id}, {task.author_id}, \\'{task.text}\\', {task.Priority}, \\'{task.status}\\', \\'{task.contract_id}\\')')\r\n\t\t\t\t\tprint('New task added succesfully')\r\n\t\t\t\texcept Exception as _ex:\r\n\t\t\t\t\tprint(\"[INFO] Error. New task not added. Reason: \", _ex)\r\n\t\t\t\t\treturn\r\n\t\texcept Exception as _ex:\r\n\t\t\tprint(\"[INFO] Error while working with PostgreSQL\", _ex)\r\n\t\tfinally:\r\n\t\t\t# if connection:\r\n\t\t\t# \t# cursor.close()\r\n\t\t\t# connection.close()\r\n\t\t\tprint(\"[INFO] PostgreSQL connection closed\")\r\n\r\n\t\tself.close()\r\n\r\n\r\nclass Ui_Add_Task_functions(add_task):\r\n\tdef ui_add_func(self):\r\n\t\tself.ui.search.clicked.connect(self.addTask)\r\n\r\n\r\nclass add_client(QMainWindow):\r\n\tdef __init__(self, parent=None):\r\n\t\tsuper(add_client, self).__init__(parent)\r\n\t\tself.setWindowTitle(\"Add_client\")\r\n\t\tself.ui = Ui_add_client()\r\n\t\tself.ui.setupUi(self)\r\n\t\tUi_Add_Client_functions.ui_add_func(self)\r\n\t\tself.parent = parent\r\n\r\n\tdef addClient(self):\r\n\t\ttry:\r\n\t\t\t# connect to exist database\r\n\t\t\tconnection = psycopg2.connect(\r\n\t\t\t\thost=config.host,\r\n\t\t\t\tuser=current_user.login,\r\n\t\t\t\tpassword=current_user.password,\r\n\t\t\t\tdatabase=config.db_name\r\n\t\t\t)\r\n\t\t\tconnection.autocommit = True\r\n\t\t\twith connection.cursor() as cursor:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tcursor.execute(\r\n\t\t\t\t\t\tf'SELECT client_id FROM client WHERE client_id = (select max(client-id) from client)')\r\n\t\t\t\t\tcontracts = cursor.fetchall()\r\n\t\t\t\t\tidc = 1\r\n\t\t\t\t\tfor row in contracts:\r\n\t\t\t\t\t\tidc += row[0]\r\n\t\t\t\texcept Exception as _ex:\r\n\t\t\t\t\tprint(\"[INFO] Error. clients view error. Reason: \", _ex)\r\n\t\t\t\t\treturn\r\n\t\texcept Exception as _ex:\r\n\t\t\tprint(\"[INFO] Error. clients view error. Reason: \", _ex)\r\n\r\n\t\tclient = Client(idc, self.ui.Executor_id.text(), int(self.ui.Task_id.text()), self.ui.Priority.text(),\r\n\t\t\t\t\t\tself.ui.Status.text())\r\n\t\tclients.append(client)\r\n\r\n\t\tclientCard = client_card()\r\n\r\n\t\tclientCard.setFixedHeight(122)\r\n\t\tclientCard.id = client.id\r\n\t\tclientCard.number = len(client) - 1\r\n\t\tclientCard.title = self.ui.Executor_id.text()\r\n\t\tclientCard.phone = self.ui.Task_id.text()\r\n\t\tclientCard.email = self.ui.Priority.text()\r\n\t\tclientCard.city = self.ui.Status.text()\r\n\t\tclientCard.set()\r\n\r\n\t\tclients_cards.append(clientCard)\r\n\r\n\t\tself.ui.Executor_id.setText(\"\")\r\n\t\tself.ui.Task_id.setText(\"\")\r\n\t\tself.ui.Priority.setText(\"\")\r\n\t\tself.ui.Status.setText(\"\")\r\n\r\n\t\tmain.MainWindow.AddTVert(self.parent, clientCard)\r\n\r\n\t\t###добавить в бд\r\n\r\n\t\ttry:\r\n\t\t\t# connect to exist database\r\n\t\t\tconnection = psycopg2.connect(\r\n\t\t\t\thost=config.host,\r\n\t\t\t\tuser=current_user.login,\r\n\t\t\t\tpassword=current_user.password,\r\n\t\t\t\tdatabase=config.db_name\r\n\t\t\t)\r\n\t\t\tconnection.autocommit = True\r\n\r\n\t\t\twith connection.cursor() as cursor:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tcursor.execute(\r\n\t\t\t\t\t\tf'INSERT INTO client (phone_number, email, company_name, registration_city) VALUES ({client.phone}, \\'{client.email}\\', \\'{client.title}\\', \\'{client.city}\\')')\r\n\t\t\t\t\tprint('New client added succesfully')\r\n\t\t\t\texcept Exception as _ex:\r\n\t\t\t\t\tprint(\"[INFO] Error. New client not added. Reason: \", _ex)\r\n\r\n\t\texcept Exception as _ex:\r\n\t\t\tprint(\"[INFO] Error while working with PostgreSQL\", _ex)\r\n\t\tfinally:\r\n\t\t\tprint(\"[INFO] PostgreSQL connection closed\")\r\n\r\n\t\tself.close()\r\n\r\n\r\nclass Ui_Add_Client_functions(add_client):\r\n\tdef ui_add_func(self):\r\n\t\tself.ui.search.clicked.connect(self.addClient)\r\n\r\n\r\nclass user_card(QMainWindow, Ui_usercard):\r\n\tdef __init__(self):\r\n\t\tsuper(user_card, self).__init__()\r\n\t\tself.setupUi(self)\r\n\r\n\t\tself.id = 0\r\n\t\tself.name = \"\"\r\n\t\tself.email = \"\"\r\n\t\tself.phone = \"\"\r\n\t\tself.role = \"\"\r\n\t\tself.number = 0\r\n\r\n\tdef set(self):\r\n\t\tself.id_text.setPlainText(str(self.id))\r\n\t\tself.email_text.setPlainText(str(self.email))\r\n\t\tself.role_text.setPlainText(str(self.role))\r\n\t\tself.phone_text.setPlainText(str(self.phone))\r\n\t\tself.Name_text.setPlainText(str(self.name))\r\n\r\n\r\nclass RegistrationWindow(QMainWindow):\r\n\tdef __init__(self, parent=None):\r\n\t\tsuper(RegistrationWindow, self).__init__(parent)\r\n\t\tself.setWindowTitle(\"Registration\")\r\n\t\tself.ui = Ui_Registration()\r\n\t\tself.ui.setupUi(self)\r\n\t\tUi_Registration_functions.ui_registration_func(self)\r\n\t\tself.parent = parent\r\n\r\n\tdef addUser(self):\r\n\t\tif self.ui.radioButton.isChecked():\r\n\t\t\trole_ = \"manager\"\r\n\t\telse:\r\n\t\t\trole_ = \"employee\"\r\n\t\ttry:\r\n\t\t\t# connect to exist database\r\n\t\t\tconnection = psycopg2.connect(\r\n\t\t\t\thost=config.host,\r\n\t\t\t\tuser=current_user.login,\r\n\t\t\t\tpassword=current_user.password,\r\n\t\t\t\tdatabase=config.db_name\r\n\t\t\t)\r\n\t\t\tconnection.autocommit = True\r\n\t\t\twith connection.cursor() as cursor:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tcursor.execute(\r\n\t\t\t\t\t\tf'SELECT employee_id FROM employee WHERE employee_id = (select max(employee_id) from employee)')\r\n\t\t\t\t\tcontracts = cursor.fetchall()\r\n\t\t\t\t\tidu = 1\r\n\t\t\t\t\tfor row in contracts:\r\n\t\t\t\t\t\tidu += row[0]\r\n\t\t\t\t\t\tprint(idu)\r\n\t\t\t\texcept Exception as _ex:\r\n\t\t\t\t\tprint(\"[INFO] Error. clients view error. Reason: \", _ex)\r\n\t\texcept Exception as _ex:\r\n\t\t\tprint(\"[INFO] Error. clients view error. Reason: \", _ex)\r\n\t\temployee = Employee(idu, role_,\r\n\t\t\t\t\t\t\tself.ui.lineEdit_f_2.text() + \" \" + self.ui.lineEdit_f_3.text() + \" \" + self.ui.lineEdit_f_4.text(),\r\n\t\t\t\t\t\t\tself.ui.lineEdit_f_5.text(), self.ui.lineEdit_f_6.text())\r\n\t\temployees.append(employee)\r\n\r\n\t\temployee_card = user_card()\r\n\r\n\t\temployee_card.setFixedHeight(144)\r\n\t\temployee_card.number = len(employees) - 1\r\n\t\temployee_card.id = employee.id\r\n\t\temployee_card.name = (\r\n\t\t\t\tself.ui.lineEdit_f_2.text() + \" \" + self.ui.lineEdit_f_3.text() + \" \" + self.ui.lineEdit_f_4.text())\r\n\t\temployee_card.phone = self.ui.lineEdit_f_5.text()\r\n\t\temployee_card.email = self.ui.lineEdit_f_6.text()\r\n\r\n\t\temployee_card.role = employee.role\r\n\t\temployee_card.set()\r\n\r\n\t\temployees_cards.append(employee_card)\r\n\r\n\t\tmain.MainWindow.AddTVert(self.parent, employee_card)\r\n\r\n\t\ttry:\r\n\t\t\tconnection = psycopg2.connect(\r\n\t\t\t\thost=config.host,\r\n\t\t\t\tuser=current_user.login,\r\n\t\t\t\tpassword=current_user.password,\r\n\t\t\t\tdatabase=config.db_name\r\n\t\t\t)\r\n\t\t\tconnection.autocommit = True\r\n\r\n\t\t\twith connection.cursor() as cursor:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tcursor.execute(\r\n\t\t\t\t\t\tf'CALL add_employee(\\'{employee.role}\\',\\'{self.ui.lineEdit_f_2.text()}\\',\\'{self.ui.lineEdit_f_3.text()}\\',\\'{self.ui.lineEdit_f_4.text()}\\', {employee.phone},\\'{employee.email}\\',\\'{self.ui.lineEditx.text()}\\', \\'{hashlib.sha1(self.ui.lineEdit_f.text().encode()).hexdigest()}\\')')\r\n\t\t\t\t\tprint('New employee added succesfully')\r\n\t\t\t\texcept Exception as _ex:\r\n\t\t\t\t\tprint(\"[INFO] Error. New employee not added. Reason: \", _ex)\r\n\r\n\t\t\tconnection.close()\r\n\r\n\t\texcept Exception as _ex:\r\n\t\t\tprint(\"[INFO] Error while working with PostgreSQL\", _ex)\r\n\t\tfinally:\r\n\t\t\tprint(\"[INFO] PostgreSQL connection closed\")\r\n\r\n\t\tself.ui.lineEdit_f.setText(\"\")\r\n\t\tself.ui.lineEdit_f_2.setText(\"\")\r\n\t\tself.ui.lineEdit_f_3.setText(\"\")\r\n\t\tself.ui.lineEdit_f_4.setText(\"\")\r\n\t\tself.ui.lineEdit_f_5.setText(\"\")\r\n\t\tself.ui.lineEdit_f_6.setText(\"\")\r\n\t\tself.ui.lineEditx.setText(\"\")\r\n\t\tself.close()\r\n\r\n\r\nclass Ui_Registration_functions(RegistrationWindow):\r\n\tdef ui_registration_func(self):\r\n\t\tself.ui.reggg.clicked.connect(self.addUser)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/noteWidget.py b/noteWidget.py
--- a/noteWidget.py	(revision e7aa5931294875417ca4344f4f8f31b388789013)
+++ b/noteWidget.py	(date 1671638141811)
@@ -1,438 +1,9 @@
-import datetime
-from PyQt5 import QtCore
-import PySide6
-import psycopg2
 from PyQt5.QtWidgets import QWidget, QMainWindow
-from PySide6.QtCore import Slot, Signal
 
-import config
-import hashlib
-import json
-
-import main
-from changeTask import *
+from Ui.ui_download import Ui_Download_window
+from Ui.ui_registration import Ui_Registration
+from employee import Employee, employees, user_card, employees_cards
 from main import *
-from ui_task_card import ui_task
-from Ui_company import Ui_clientcard
-from Ui_employee import Ui_usercard
-from add_client import Ui_add_client
-from add_task import Ui_add_task
-from company_filters import Ui_CLients_filters
-from employee_filters import Ui_Employee_filters
-from tasks_filrers import Ui_tasks_filters
-from ui_download import Ui_Download_window
-from ui_registration import Ui_Registration
-from widget_classes import *
-
-
-class change(QMainWindow, Ui_change_task):
-	def __init__(self, parent=None):
-		super(change, self).__init__(parent)
-		self.setupUi(self)
-		self.parent = parent
-		Ui_Change_Task_functions.ui_change_func(self)
-		self.Contract_id.setText(str(self.parent.Priority))
-		self.Task_id.setText(str(self.parent.executor_id))
-		self.Priority.setText(str(self.parent.status))
-		self.dateTimeEdit.setDate(tasks[self.parent.id - 1].deadline)
-		if current_user.id != tasks[self.parent.number].executor_id and current_user.id != tasks[
-			self.parent.number].author_id and not current_user.login == "postgres": self.dateTimeEdit.hide(), self.Priority.hide()
-		if current_user.role == "employee": self.Task_id.hide()
-
-	def set(self):
-		self.parent.Priority = self.Contract_id.text()
-		self.parent.executor_id = self.Task_id.text()
-		self.parent.status = self.Priority.text()
-		self.parent.deadline = self.dateTimeEdit.text()
-
-		self.parent.Priority_number.setPlainText(str(self.parent.Priority))
-		self.parent.Executor_number.setPlainText(str(self.parent.executor_id))
-		self.parent.Deadline.setPlainText(str(self.parent.deadline))
-		self.parent.Task_Status.setPlainText(self.parent.status)
-
-		tasks[self.parent.id - 1].deadline = self.dateTimeEdit.date()
-		tasks[self.parent.id - 1].executor_id = int(self.parent.executor_id)
-		tasks[self.parent.id - 1].Priority = int(self.parent.Priority)
-		tasks[self.parent.id - 1].status = str(self.parent.status)
-
-		if (self.parent.status == "Finished" or self.parent.status == "finished"):
-			self.parent.Change_task.hide()
-
-		try:
-			connection = psycopg2.connect(
-				host=config.host,
-				user=current_user.login,
-				password=current_user.password,
-				database=config.db_name
-			)
-			connection.autocommit = True
-			with connection.cursor() as cursor:
-				try:
-					cursor.execute(
-						f'UPDATE task SET deadline = \'{self.parent.deadline}\',executor_employee_id = {tasks[self.parent.id - 1].executor_id},priority = {tasks[self.parent.id - 1].Priority}, status = \'{tasks[self.parent.id - 1].status}\' WHERE task_id = {self.parent.id}')
-					print('Task updated succesfully')
-				except Exception as _ex:
-					print("[INFO] Error. New task not added. Reason: ", _ex)
-
-		except Exception as _ex:
-			print("[INFO] Error while working with PostgreSQL", _ex)
-
-		self.close()
-
-
-class Ui_Change_Task_functions(change):
-	def ui_change_func(self):
-		self.search.clicked.connect(self.set)
-
-
-class task_card(QMainWindow, ui_task):
-	def __init__(self, parent=None):
-		super(task_card, self).__init__(parent)
-		self.setupUi(self)
-		Ui_Task_Card_functions.ui_task_card_f(self)
-
-		self.id = 0
-		self.text = ""
-		self.Priority = 0
-		self.executor_id = 0
-		self.deadline = ""
-		self.status = ""
-		self.number = 0
-
-	def set(self):
-		self.Task_text.setPlainText(self.text)
-		self.Priority_number.setPlainText(str(self.Priority))
-		self.Executor_number.setPlainText(str(self.executor_id))
-		self.Task_id.setPlainText(str(self.id))
-		self.Deadline.setPlainText(str(self.deadline))
-		self.Task_Status.setPlainText(self.status)
-
-		if (self.status == "Finished" or self.status == "finished"):
-			self.Change_task.hide()
-
-	def openChange(self):
-		self.w7 = change(self)
-		self.w7.show()
-
-
-class Ui_Task_Card_functions(task_card):
-	def ui_task_card_f(self):
-		self.Change_task.clicked.connect(self.openChange)
-
-
-class client_card(QMainWindow, Ui_clientcard):
-	def __init__(self):
-		super(client_card, self).__init__()
-		self.setupUi(self)
-
-		self.id = 0
-		self.title = ""
-		self.city = ""
-		self.phone = ""
-		self.email = ""
-		self.number = 0
-
-	def set(self):
-		self.Email_text.setPlainText(str(self.id))
-		self.Email_text_2.setPlainText(self.title)
-		self.Phone_text.setPlainText(str(self.city))
-		self.Name_text.setPlainText(str(self.phone))
-		self.Role_text.setPlainText(str(self.email))
-
-
-class task_filter(QMainWindow):
-	def __init__(self, parent=None):
-		super(task_filter, self).__init__(parent)
-		self.setWindowTitle("Login")
-		self.ui = Ui_tasks_filters()
-		self.ui.setupUi(self)
-		self.parent = parent
-		Ui_task_filter_window.ui_tfilter_func(self)
-
-	def filter_tasks(self):
-		try:
-			connection = psycopg2.connect(
-				host=config.host,
-				user=current_user.login,
-				password=current_user.password,
-				database=config.db_name
-			)
-			connection.autocommit = True
-			with connection.cursor() as cursor:
-				try:
-					query_str = f'SELECT * FROM task'
-					s = 0
-					if self.ui.Author_id.text() != "":
-						query_str += f' WHERE author_employee_id = {int(self.ui.Author_id.text())}'
-						s += 1
-					if self.ui.Executor_id.text() != "":
-						if s == 0:
-							query_str += f' WHERE executor_employee_id = {int(self.ui.Executor_id.text())}'
-						else:
-							query_str += f' AND executor_employee_id = {int(self.ui.Executor_id.text())}'
-						s += 1
-					if self.ui.Task_id.text() != "":
-						if s == 0:
-							query_str += f' WHERE task_id = {int(self.ui.Task_id.text())}'
-						else:
-							query_str += f' AND task_id = {int(self.ui.Task_id.text())}'
-						s += 1
-					if self.ui.Priority.text() != "":
-						if s == 0:
-							query_str += f' WHERE priority = {int(self.ui.Priority.text())}'
-						else:
-							query_str += f' AND priority = {int(self.ui.Priority.text())}'
-						s += 1
-					if self.ui.Status.text() != "":
-						if s == 0:
-							query_str += f' WHERE status = {self.ui.Status.text()}'
-						else:
-							query_str += f' AND status = {self.ui.Status.text()}'
-						s += 1
-					if self.ui.Contract_id.text() != "":
-						if s == 0:
-							query_str += f' WHERE contract_id = {int(self.ui.Contract_id.text())}'
-						else:
-							query_str += f' AND contract_id = {int(self.ui.Contract_id.text())}'
-						s += 1
-
-					ftasks.clear()
-					cursor.execute(query_str)
-					filtered_tasks = cursor.fetchall()
-
-					print('Filtered tasks:')
-					for row in filtered_tasks:
-						print("deadline = ", row[0], )
-						print("appointment_date = ", row[1])
-						print("executor_employee_id = ", row[2])
-						print("author_employee_id = ", row[3])
-						print("task_id = ", row[4])
-						print("task_description = ", row[5])
-						print("priority = ", row[6])
-						print("status = ", row[7])
-						print("contract_id = ", row[8], "\n")
-						format = "dd.MM.yyyy"
-						tempdate = PyQt5.QtCore.QDate.fromString(row[8], format)
-						task = Task(row[2], row[3], tempdate, row[1], row[0], row[6], row[4], row[5])
-						ftasks.append(task)
-
-					for i in range(len(tasks_cards)):
-						tasks_cards[i].deleteLater()
-					tasks_cards.clear()
-
-					for i in range(len(ftasks)):
-						tasskCard = task_card()
-
-						tasskCard.setFixedHeight(122)
-						tasskCard.text = ftasks[i].text
-						tasskCard.id = ftasks[i].id
-						tasskCard.deadline = ftasks[i].deadline.toString('yyyy.MM.dd')
-						tasskCard.status = ftasks[i].status
-						tasskCard.Priority = ftasks[i].Priority
-						tasskCard.executor_id = ftasks[i].executor_id
-						tasskCard.set()
-
-						tasks_cards.append(tasskCard)
-					main.MainWindow.AddTVert(self.parent, tasks_cards[i])
-
-				except Exception as _ex:
-					print("[INFO] Error. Task filter error. Reason: ", _ex)
-		except Exception as _ex:
-			print("[INFO] Error. Task filter error. Reason: ", _ex)
-
-
-class Ui_task_filter_window(task_filter):
-	def ui_tfilter_func(self):
-		self.ui.search.clicked.connect(self.filter_tasks)
-
-
-class company_filter(QMainWindow):
-	def __init__(self, parent=None):
-		super(company_filter, self).__init__(parent)
-		self.setWindowTitle("Login")
-		self.ui = Ui_CLients_filters()
-		self.ui.setupUi(self)
-		self.parent = parent
-		Ui_company_filter_window.ui_cfilter_func(self)
-
-	def filter_client(self):
-		try:
-			connection = psycopg2.connect(
-				host=config.host,
-				user=current_user.login,
-				password=current_user.password,
-				database=config.db_name
-			)
-			connection.autocommit = True
-
-			with connection.cursor() as cursor:
-				try:
-					query_str = f'SELECT * FROM client'
-					s = 0
-					if self.ui.company_name.text() != "":
-						query_str += f' WHERE company_name = \'{self.ui.company_name.text()}\''
-						s += 1
-					if self.ui.city.text() != "":
-						if s == 0:
-							query_str += f' WHERE registration_city = \'{self.ui.city.text()}\''
-						else:
-							query_str += f' AND registration_city = \'{self.ui.city.text()}\''
-						s += 1
-					if self.ui.email.text() != "":
-						if s == 0:
-							query_str += f' WHERE email = \'{self.ui.email.text()}\''
-						else:
-							query_str += f' AND email = \'{self.ui.email.text()}\''
-						s += 1
-					if self.ui.phone.text() != "":
-						if s == 0:
-							query_str += f' WHERE phone_number = {int(self.ui.phone.text())}'
-						else:
-							query_str += f' AND phone_number = {int(self.ui.phone.text())}'
-						s += 1
-
-					fclients.clear()
-					cursor.execute(query_str)
-					filtered_clients = cursor.fetchall()
-
-					print('Filtered tasks:')
-					for row in filtered_clients:
-						fclient = Client(row[0], row[3], row[1], row[2], row[4])
-						fclients.append(fclient)
-
-					for i in range(len(clients_cards)):
-						clients_cards[i].deleteLater()
-					clients_cards.clear()
-
-					for i in range(len(fclients)):
-						clientCard = client_card()
-
-						clientCard.setFixedHeight(122)
-						clientCard.id = fclients[i].id
-						clientCard.title = fclients[i].title
-						clientCard.phone = fclients[i].phone
-						clientCard.email = fclients[i].email
-						clientCard.city = fclients[i].city
-						clientCard.set()
-
-						clients_cards.append(clientCard)
-
-						main.MainWindow.AddTVert(self.parent, clients_cards[i])
-
-				except Exception as _ex:
-					print("[INFO] Error. Client filter error. Reason: ", _ex)
-		except Exception as _ex:
-			print("[INFO] Error. Client filter error. Reason: ", _ex)
-
-
-class Ui_company_filter_window(company_filter):
-	def ui_cfilter_func(self):
-		self.ui.search.clicked.connect(self.filter_client)
-
-
-class employee_filter(QMainWindow):
-	def __init__(self, parent=None):
-		super(employee_filter, self).__init__(parent)
-		self.setWindowTitle("Login")
-		self.ui = Ui_Employee_filters()
-		self.ui.setupUi(self)
-		self.parent = parent
-		Ui_employee_filter_window.ui_efilter_func(self)
-
-	def filter_employee(self):
-		try:
-			connection = psycopg2.connect(
-				host=config.host,
-				user=current_user.login,
-				password=current_user.password,
-				database=config.db_name
-			)
-			connection.autocommit = True
-			with connection.cursor() as cursor:
-				try:
-					query_str = f'SELECT * FROM employee'
-					s = 0
-					if self.ui.fname.text() != "":
-						query_str += f' WHERE first_name = \'{self.ui.fname.text()}\''
-						s += 1
-					if self.ui.sname.text() != "":
-						if s == 0:
-							query_str += f' WHERE last_name = \'{self.ui.sname.text()}\''
-						else:
-							query_str += f' AND last_name = \'{self.ui.sname.text()}\''
-						s += 1
-					if self.ui.pname.text() != "":
-						if s == 0:
-							query_str += f' WHERE patronymyc = \'{self.ui.pname.text()}\''
-						else:
-							query_str += f' AND patronymyc = \'{self.ui.pname.text()}\''
-						s += 1
-					if self.ui.phone.text() != "":
-						if s == 0:
-							query_str += f' WHERE phone_number = {int(self.ui.phone.text())}'
-						else:
-							query_str += f' AND phone_number = {int(self.ui.phone.text())}'
-						s += 1
-					if self.ui.email.text() != "":
-						if s == 0:
-							query_str += f' WHERE email = \'{self.ui.email.text()}\''
-						else:
-							query_str += f' AND email = \'{self.ui.email.text()}\''
-						s += 1
-					if self.ui.role.text() != "":
-						if s == 0:
-							query_str += f' WHERE job_title = \'{self.ui.role.text()}\''
-						else:
-							query_str += f' AND job_title = \'{self.ui.role.text()}\''
-						s += 1
-
-					femployees.clear()
-					cursor.execute(query_str)
-					filtered_employees = cursor.fetchall()
-
-					print('Filtered employees:')
-					for row in filtered_employees:
-						print("job_title = ", row[0], )
-						print("first_name = ", row[1])
-						print("last_name = ", row[2])
-						print("patronymyc = ", row[3])
-						print("phone_number = ", row[4])
-						print("email = ", row[5])
-						print("employee_id = ", row[6])
-						print("username = ", row[7])
-						print("password = ", row[8], "\n")
-
-						employee = Employee(row[6], row[0], row[1] + " " + row[2] + " " + row[3], row[4], row[5])
-						femployees.append(employee)
-
-						for i in range(len(employees_cards)):
-							employees_cards[i].deleteLater()
-						employees_cards.clear()
-
-						for i in range(len(femployees)):
-							employee_card = user_card()
-
-							employee_card.setFixedHeight(122)
-							employee_card.id = femployees[i].id
-							employee_card.name = femployees[i].name
-							employee_card.phone = femployees[i].phone
-							employee_card.email = femployees[i].email
-							employee_card.role = femployees[i].role
-							employee_card.set()
-
-							employees_cards.append(employee_card)
-
-							main.MainWindow.AddTVert(self.parent, employees_cards[i])
-
-				except Exception as _ex:
-					print("[INFO] Error. Employee filter error. Reason: ", _ex)
-		except Exception as _ex:
-			print("[INFO] Error. Employee filter error. Reason: ", _ex)
-
-
-class Ui_employee_filter_window(employee_filter):
-	def ui_efilter_func(self):
-		self.ui.search.clicked.connect(self.filter_employee)
 
 
 class DownloadWindow(QWidget):
@@ -496,207 +67,13 @@
 		self.ui.download_tasks_by_employee.clicked.connect(self.task_by_employee)
 
 
-class add_task(QMainWindow):
-	def __init__(self, parent=None):
-		super(add_task, self).__init__(parent)
-		self.setWindowTitle("Add_task")
-		self.ui = Ui_add_task()
-		self.ui.setupUi(self)
-		Ui_Add_Task_functions.ui_add_func(self)
-		self.parent = parent
-		if current_user.role == "employee": self.ui.Executor_id.hide()
-
-	def addTask(self):
-		if current_user.role == "employee":
-			executor_id = current_user.id
-		else:
-			executor_id = int(self.ui.Executor_id.text())
-
-		try:
-			connection = psycopg2.connect(
-				host=config.host,
-				user=current_user.login,
-				password=current_user.password,
-				database=config.db_name
-			)
-			connection.autocommit = True
-			with connection.cursor() as cursor:
-				try:
-					cursor.execute(f'SELECT task_id FROM task WHERE task_id = (select max(task_id) from task)')
-					contracts = cursor.fetchall()
-					idt = 1
-					for row in contracts:
-						idt += row[0]
-				except Exception as _ex:
-					print("[INFO] Error. clients view error. Reason: ", _ex)
-					return
-		except Exception as _ex:
-			print("[INFO] Error. clients view error. Reason: ", _ex)
-
-		task = Task(idt, str(self.ui.Task_id.text()), self.ui.dateTimeEdit.date(), current_user.id, executor_id,
-					int(self.ui.Contract_id.text()), int(self.ui.Priority.text()), str("Active"))
-
-		tasks.append(task)
-
-		taskCard = task_card()
-		taskCard.setFixedHeight(122)
-		taskCard.number = len(tasks) - 1
-		taskCard.text = task.text
-		taskCard.id = task.id
-		taskCard.deadline = self.ui.dateTimeEdit.text()
-		taskCard.status = task.status
-		taskCard.Priority = task.Priority
-		taskCard.executor_id = task.executor_id
-		taskCard.set()
-
-		tasks_cards.append(taskCard)
-
-		main.MainWindow.AddTVert(self.parent, taskCard)
-
-		###добавить в бд
-
-		currenttime = (QtCore.QDate.currentDate().toString('dd.MM.yyyy'))
-
-		try:
-			connection = psycopg2.connect(
-				host=config.host,
-				user=current_user.login,
-				password=current_user.password,
-				database=config.db_name
-			)
-			connection.autocommit = True
-			with connection.cursor() as cursor:
-				try:
-					cursor.execute(
-						f'INSERT INTO task (deadline, appointent_date, executor_employee_id, author_employee_id, task_description, priority, status, contract_id) VALUES (\'{(taskCard.deadline)}\', \'{currenttime}\', {task.executor_id}, {task.author_id}, \'{task.text}\', {task.Priority}, \'{task.status}\', \'{task.contract_id}\')')
-					print('New task added succesfully')
-				except Exception as _ex:
-					print("[INFO] Error. New task not added. Reason: ", _ex)
-					return
-		except Exception as _ex:
-			print("[INFO] Error while working with PostgreSQL", _ex)
-		finally:
-			# if connection:
-			# 	# cursor.close()
-			# connection.close()
-			print("[INFO] PostgreSQL connection closed")
-
-		self.close()
-
-
-class Ui_Add_Task_functions(add_task):
-	def ui_add_func(self):
-		self.ui.search.clicked.connect(self.addTask)
-
-
-class add_client(QMainWindow):
-	def __init__(self, parent=None):
-		super(add_client, self).__init__(parent)
-		self.setWindowTitle("Add_client")
-		self.ui = Ui_add_client()
-		self.ui.setupUi(self)
-		Ui_Add_Client_functions.ui_add_func(self)
-		self.parent = parent
-
-	def addClient(self):
-		try:
-			# connect to exist database
-			connection = psycopg2.connect(
-				host=config.host,
-				user=current_user.login,
-				password=current_user.password,
-				database=config.db_name
-			)
-			connection.autocommit = True
-			with connection.cursor() as cursor:
-				try:
-					cursor.execute(
-						f'SELECT client_id FROM client WHERE client_id = (select max(client-id) from client)')
-					contracts = cursor.fetchall()
-					idc = 1
-					for row in contracts:
-						idc += row[0]
-				except Exception as _ex:
-					print("[INFO] Error. clients view error. Reason: ", _ex)
-					return
-		except Exception as _ex:
-			print("[INFO] Error. clients view error. Reason: ", _ex)
 
-		client = Client(idc, self.ui.Executor_id.text(), int(self.ui.Task_id.text()), self.ui.Priority.text(),
-						self.ui.Status.text())
-		clients.append(client)
 
-		clientCard = client_card()
 
-		clientCard.setFixedHeight(122)
-		clientCard.id = client.id
-		clientCard.number = len(client) - 1
-		clientCard.title = self.ui.Executor_id.text()
-		clientCard.phone = self.ui.Task_id.text()
-		clientCard.email = self.ui.Priority.text()
-		clientCard.city = self.ui.Status.text()
-		clientCard.set()
 
-		clients_cards.append(clientCard)
 
-		self.ui.Executor_id.setText("")
-		self.ui.Task_id.setText("")
-		self.ui.Priority.setText("")
-		self.ui.Status.setText("")
 
-		main.MainWindow.AddTVert(self.parent, clientCard)
 
-		###добавить в бд
-
-		try:
-			# connect to exist database
-			connection = psycopg2.connect(
-				host=config.host,
-				user=current_user.login,
-				password=current_user.password,
-				database=config.db_name
-			)
-			connection.autocommit = True
-
-			with connection.cursor() as cursor:
-				try:
-					cursor.execute(
-						f'INSERT INTO client (phone_number, email, company_name, registration_city) VALUES ({client.phone}, \'{client.email}\', \'{client.title}\', \'{client.city}\')')
-					print('New client added succesfully')
-				except Exception as _ex:
-					print("[INFO] Error. New client not added. Reason: ", _ex)
-
-		except Exception as _ex:
-			print("[INFO] Error while working with PostgreSQL", _ex)
-		finally:
-			print("[INFO] PostgreSQL connection closed")
-
-		self.close()
-
-
-class Ui_Add_Client_functions(add_client):
-	def ui_add_func(self):
-		self.ui.search.clicked.connect(self.addClient)
-
-
-class user_card(QMainWindow, Ui_usercard):
-	def __init__(self):
-		super(user_card, self).__init__()
-		self.setupUi(self)
-
-		self.id = 0
-		self.name = ""
-		self.email = ""
-		self.phone = ""
-		self.role = ""
-		self.number = 0
-
-	def set(self):
-		self.id_text.setPlainText(str(self.id))
-		self.email_text.setPlainText(str(self.email))
-		self.role_text.setPlainText(str(self.role))
-		self.phone_text.setPlainText(str(self.phone))
-		self.Name_text.setPlainText(str(self.name))
 
 
 class RegistrationWindow(QMainWindow):
@@ -769,7 +146,8 @@
 			with connection.cursor() as cursor:
 				try:
 					cursor.execute(
-						f'CALL add_employee(\'{employee.role}\',\'{self.ui.lineEdit_f_2.text()}\',\'{self.ui.lineEdit_f_3.text()}\',\'{self.ui.lineEdit_f_4.text()}\', {employee.phone},\'{employee.email}\',\'{self.ui.lineEditx.text()}\', \'{hashlib.sha1(self.ui.lineEdit_f.text().encode()).hexdigest()}\')')
+						f'CALL add_employee(\'{employee.role}\',\'{self.ui.lineEdit_f_2.text()}\',\'{self.ui.lineEdit_f_3.text()}\','
+						f'\'{self.ui.lineEdit_f_4.text()}\', {employee.phone},\'{employee.email}\',\'{self.ui.lineEditx.text()}\', \'{hashlib.sha1(self.ui.lineEdit_f.text().encode()).hexdigest()}\')')
 					print('New employee added succesfully')
 				except Exception as _ex:
 					print("[INFO] Error. New employee not added. Reason: ", _ex)
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sqlite3\r\nimport sys\r\nimport time\r\n\r\nimport PyQt5\r\n\r\nimport widget_classes\r\nfrom database import *\r\n\r\nfrom PyQt5 import QtCore, QtGui, QtWidgets\r\nfrom PyQt5.QtCore import Qt, QPoint\r\nfrom PyQt5.QtWidgets import QMainWindow, QApplication, QWidget\r\n\r\nfrom ui_main import Ui_MainWindow\r\nfrom ui_functions import *\r\nfrom ui_autorization import *\r\nfrom noteWidget import *\r\nfrom widget_classes import *\r\nimport hashlib\r\n\r\n\r\nclass MainWindow(QMainWindow, Ui_MainWindow):\r\n    def __init__(self, parent=None):\r\n        super(MainWindow, self).__init__(parent)\r\n        self.setupUi(self)\r\n\r\n        self.counter_id: int = 0\r\n\r\n        def moveWindow(event):\r\n            if event.buttons() == Qt.LeftButton:\r\n                self.move(self.pos() + event.globalPos() - self.dragPos)\r\n                self.dragPos = event.globalPos()\r\n                event.accept()\r\n\r\n        self.frame_4.mouseMoveEvent = moveWindow\r\n\r\n        UIFunctions.uiDefinitions(self)\r\n\r\n        self.status = 0\r\n\r\n    def view_tasks(username: str):\r\n        try:\r\n            # connect to exist database\r\n            connection = psycopg2.connect(\r\n                host=config.host,\r\n                user=current_user.login,\r\n                password=current_user.password,\r\n                database=config.db_name\r\n            )\r\n            connection.autocommit = True\r\n            with connection.cursor() as cursor:\r\n                            try:\r\n                                cursor.execute(\r\n                                        f'SELECT * FROM task')\r\n                                author_tasks = cursor.fetchall()\r\n\r\n                                print('Tasks by authorship of an employee:')\r\n                                for row in author_tasks:\r\n                                        format = \"dd.MM.yyyy\"\r\n                                        tempdate = PyQt5.QtCore.QDate.fromString(row[8], format)\r\n                                        task = Task(row[2], row[3], tempdate, row[1], row[0], row[6], row[4], row[5])\r\n                                        tasks.append(task)\r\n\r\n                            except Exception as _ex:\r\n                                    print(\"[INFO] Error. view tasks error. Reason: \", _ex)\r\n        except Exception as _ex:\r\n            print(\"[INFO] Error. view tasks error. Reason: \", _ex)\r\n\r\n    def view_clients(self):\r\n        try:\r\n            # connect to exist database\r\n            connection = psycopg2.connect(\r\n                host=config.host,\r\n                user=current_user.login,\r\n                password=current_user.password,\r\n                database=config.db_name\r\n            )\r\n            connection.autocommit = True\r\n            with connection.cursor() as cursor:\r\n                    try:\r\n                            cursor.execute(f'SELECT * FROM client')\r\n                            contracts = cursor.fetchall()\r\n\r\n                            print('Clients seen by the current user:')\r\n                            for row in contracts:\r\n                                    client = Client(row[0], row[3], row[1], row[2], row[4])\r\n                                    clients.append(client)\r\n\r\n                    except Exception as _ex:\r\n                            print(\"[INFO] Error. clients view error. Reason: \", _ex)\r\n        except Exception as _ex:\r\n            print(\"[INFO] Error. clients view error. Reason: \", _ex)\r\n\r\n\r\n    def view_employees(self):\r\n        try:\r\n            # connect to exist database\r\n            connection = psycopg2.connect(\r\n                host=config.host,\r\n                user=current_user.login,\r\n                password=current_user.password,\r\n                database=config.db_name\r\n            )\r\n            connection.autocommit = True\r\n            with connection.cursor() as cursor:\r\n                    try:\r\n                            cursor.execute(\r\n                                    f'SELECT * FROM employee')\r\n                            users = cursor.fetchall()\r\n\r\n                            for row in users:\r\n                                    employee = Employee(row[6], row[0], row[1] + \" \" + row[2] + \" \" + row[3], row[4], row[5])\r\n                                    employees.append(employee)\r\n\r\n                    except Exception as _ex:\r\n                            print(\"[INFO] Error. employees view error. Reason: \", _ex)\r\n        except Exception as _ex:\r\n            print(\"[INFO] Error. employees view error. Reason: \", _ex)\r\n\r\n    def AddTVert(self, widget):\r\n            self.verticalLayout.addWidget(widget)\r\n\r\n    def openDown(self):\r\n        self.w4 = DownloadWindow()\r\n        self.w4.show()\r\n\r\n    def openFilters(self):\r\n        if self.status == 1:\r\n            self.w5 = task_filter(self)\r\n            self.w5.show()\r\n        elif self.status == 2:\r\n            self.w5 = employee_filter(self)\r\n            self.w5.show()\r\n        elif self.status == 3:\r\n            self.w5 = company_filter(self)\r\n            self.w5.show()\r\n\r\n\r\n    def mousePressEvent(self, event):\r\n        self.dragPos = event.globalPos()\r\n\r\n    def show_login(self):\r\n        self.w2 = LoginWindow(self)\r\n        self.w2.show()\r\n\r\n    def show_tasks(self):\r\n        if not self.isLogged(): return\r\n        self.status = 1\r\n        for i in range(len(clients_cards)):\r\n            clients_cards[i].deleteLater()\r\n        clients_cards.clear()\r\n        for i in range(len(employees_cards)):\r\n            employees_cards[i].deleteLater()\r\n        employees_cards.clear()\r\n        for i in range(len(tasks)):\r\n            tasskCard = task_card()\r\n\r\n            tasskCard.setFixedHeight(122)\r\n            tasskCard.text = tasks[i].text\r\n            tasskCard.id = tasks[i].id\r\n            tasskCard.deadline = tasks[i].deadline.toString('yyyy.MM.dd')\r\n            tasskCard.status = tasks[i].status\r\n            tasskCard.Priority = tasks[i].Priority\r\n            tasskCard.executor_id = tasks[i].executor_id\r\n            tasskCard.number = i\r\n            tasskCard.set()\r\n\r\n            tasks_cards.append(tasskCard)\r\n\r\n            self.verticalLayout.addWidget(tasks_cards[i])\r\n\r\n    def show_clients(self):\r\n        if not self.isLogged(): return\r\n        self.status = 3\r\n        for i in range(len(employees_cards)):\r\n            employees_cards[i].deleteLater()\r\n        employees_cards.clear()\r\n        for i in range(len(tasks_cards)):\r\n            tasks_cards[i].deleteLater()\r\n        tasks_cards.clear()\r\n        for i in range(len(clients)):\r\n            clientCard = client_card()\r\n\r\n            clientCard.setFixedHeight(122)\r\n            clientCard.id = clients[i].id\r\n            clientCard.title = clients[i].title\r\n            clientCard.phone = clients[i].phone\r\n            clientCard.email = clients[i].email\r\n            clientCard.city = clients[i].city\r\n            clientCard.number = i\r\n            clientCard.set()\r\n\r\n            clients_cards.append(clientCard)\r\n\r\n            self.verticalLayout.addWidget(clients_cards[i])\r\n\r\n    def show_employee(self):\r\n        if not self.isLogged(): return\r\n        self.status = 2\r\n        for i in range(len(clients_cards)):\r\n            clients_cards[i].deleteLater()\r\n        clients_cards.clear()\r\n        for i in range(len(tasks_cards)):\r\n            tasks_cards[i].deleteLater()\r\n        tasks_cards.clear()\r\n\r\n        for i in range(len(employees)):\r\n            employee_card = user_card()\r\n\r\n            employee_card.setFixedHeight(122)\r\n            employee_card.id = employees[i].id\r\n            employee_card.name = employees[i].name\r\n            employee_card.phone = employees[i].phone\r\n            employee_card.email = employees[i].email\r\n            employee_card.role = employees[i].role\r\n            employee_card.number = i\r\n            employee_card.set()\r\n\r\n            employees_cards.append(employee_card)\r\n\r\n            self.verticalLayout.addWidget(employees_cards[i])\r\n\r\n    def show_add(self):\r\n        if self.status == 1:\r\n            self.w6 = add_task(self)\r\n            self.w6.show()\r\n        elif self.status == 3:\r\n            self.w6 = add_client(self)\r\n            self.w6.show()\r\n\r\n\r\n    def refresh(self):\r\n        print(\"refresh\")\r\n\r\n    def fullClose(self):\r\n        self.close()\r\n        self.w2.close()\r\n        self.w3.close()\r\n        self.w4.close()\r\n        self.w5.close()\r\n\r\n    def isLogged(self):\r\n        if current_user.login is None:\r\n            return False\r\n        return True\r\n\r\nclass LoginWindow(QMainWindow):\r\n    def __init__(self, parent=None):\r\n        super(LoginWindow, self).__init__(parent)\r\n        self.parent = parent\r\n        self.setWindowTitle(\"Login\")\r\n        self.ui = Ui_Login()\r\n        self.ui.setupUi(self)\r\n        Ui_Login_functions.ui_login_func(self)\r\n        self.parent = parent\r\n\r\n    def openReg(self):\r\n        #проверка на права\r\n        if (current_user.login != \"postgres\"):\r\n            self.ui.lineEdit.setText(\"\")\r\n            self.ui.lineEdit_2.setText(\"\")\r\n            self.ui.lineEdit.setPlaceholderText(\"No permissions\")\r\n            self.ui.lineEdit_2.setPlaceholderText(\"No permissions\")\r\n            return\r\n\r\n        self.w3 = RegistrationWindow(self.parent)\r\n        self.close()\r\n        self.w3.show()\r\n\r\n    def Log(self):\r\n        if self.ui.lineEdit.text() == \"\" or self.ui.lineEdit_2.text() == \"\":\r\n            self.ui.lineEdit.setPlaceholderText(\"Enter login\")\r\n            self.ui.lineEdit_2.setPlaceholderText(\"Enter password\")\r\n            return\r\n\r\n        try:\r\n            if (self.ui.lineEdit.text() == \"postgres\"):\r\n                connection = psycopg2.connect(\r\n                    host=config.host,\r\n                    user=self.ui.lineEdit.text(),\r\n                    password=self.ui.lineEdit_2.text(),\r\n                    database=config.db_name\r\n                )\r\n                connection.autocommit = True\r\n                with connection.cursor() as cursor:\r\n                    try:\r\n                        query_str = f'SELECT job_title, employee_id FROM public.employee WHERE username = \\'{self.ui.lineEdit.text()}\\''\r\n                        cursor.execute(query_str)\r\n                        role_and_id = cursor.fetchall()\r\n\r\n                        for row in role_and_id:\r\n                                print(\"job_title = \", row[0], )\r\n                                current_user.role = row[0]\r\n                                print(\"employee_id = \", row[1], \"\\n\")\r\n                                current_user.id = row[1]\r\n\r\n                    except Exception as _ex:\r\n                        print(\"[INFO] get_job_title_and_id_by_username error. Reason: \", _ex)\r\n                current_user.password = self.ui.lineEdit_2.text()\r\n            else:\r\n                connection = psycopg2.connect(\r\n                    host=config.host,\r\n                    user=self.ui.lineEdit.text(),\r\n                    password=hashlib.sha1(self.ui.lineEdit_2.text().encode()).hexdigest(),\r\n                    database=config.db_name\r\n                )\r\n                connection.autocommit = True\r\n                with connection.cursor() as cursor:\r\n                    try:\r\n                        query_str = f'SELECT job_title, employee_id FROM public.employee WHERE username = \\'{self.ui.lineEdit.text()}\\''\r\n                        cursor.execute(query_str)\r\n                        role_and_id = cursor.fetchall()\r\n\r\n                        for row in role_and_id:\r\n                            current_user.role = row[0]\r\n                            current_user.id = row[1]\r\n\r\n                    except Exception as _ex:\r\n                        print(\"[INFO] get_job_title_and_id_by_username error. Reason: \", _ex)\r\n                current_user.password = hashlib.sha1(self.ui.lineEdit_2.text().encode()).hexdigest()\r\n            current_user.login = self.ui.lineEdit.text()\r\n\r\n            MainWindow.view_employees(self.parent)\r\n            MainWindow.view_clients(self.parent)\r\n            MainWindow.view_tasks(self.parent)\r\n            connection.close()\r\n            self.close()\r\n\r\n        except Exception as _ex:\r\n            self.ui.lineEdit.setText(\"\")\r\n            self.ui.lineEdit_2.setText(\"\")\r\n            self.ui.lineEdit.setPlaceholderText(\"Wrong data\")\r\n            self.ui.lineEdit_2.setPlaceholderText(\"Wrong data\")\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Ui_Login_functions(LoginWindow):\r\n    def ui_login_func(self):\r\n        self.ui.pushButton_2.clicked.connect(self.openReg)\r\n        self.ui.pushButton.clicked.connect(self.Log)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app = QApplication(sys.argv)\r\n    window = MainWindow()\r\n    window.show()\r\n    sys.exit(app.exec_())\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision e7aa5931294875417ca4344f4f8f31b388789013)
+++ b/main.py	(date 1671638280764)
@@ -1,22 +1,20 @@
-import sqlite3
+#from database import *
+
+import hashlib
 import sys
-import time
-
-import PyQt5
 
-import widget_classes
-from database import *
+from PyQt5 import QtCore
+from PyQt5.QtCore import Qt
+from PyQt5.QtWidgets import QApplication
 
-from PyQt5 import QtCore, QtGui, QtWidgets
-from PyQt5.QtCore import Qt, QPoint
-from PyQt5.QtWidgets import QMainWindow, QApplication, QWidget
-
-from ui_main import Ui_MainWindow
-from ui_functions import *
-from ui_autorization import *
+from Ui.ui_autorization import *
+from Ui.ui_functions import *
+from Ui.ui_main import *
+from client import clients_cards, clients, client_card, Client, add_client, company_filter
+from employee import employee_filter
 from noteWidget import *
-from widget_classes import *
-import hashlib
+from order import *
+
 
 
 class MainWindow(QMainWindow, Ui_MainWindow):
@@ -104,6 +102,10 @@
             connection.autocommit = True
             with connection.cursor() as cursor:
                     try:
+                        if (current_user.role == 'employee'):
+                            cursor.execute(
+                                    f'SELECT * FROM employee WHERE job_title = \'employee\'')
+                        else:
                             cursor.execute(
                                     f'SELECT * FROM employee')
                             users = cursor.fetchall()
Index: add_task.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/add_task.py b/Ui/add_task.py
rename from add_task.py
rename to Ui/add_task.py
--- a/add_task.py	(revision e7aa5931294875417ca4344f4f8f31b388789013)
+++ b/Ui/add_task.py	(date 1671635499169)
@@ -27,17 +27,6 @@
         self.gridLayout1 = QtWidgets.QGridLayout(self.gridLayoutWidget)
         self.gridLayout1.setObjectName(u"gridLayout1")
         self.gridLayout1.setContentsMargins(0, 0, 0, 0)
-        self.Contract_id = QLineEdit(self.gridLayoutWidget)
-        self.Contract_id.setObjectName(u"Contract_id")
-        self.Contract_id.setStyleSheet(u"text-align: center;\n"
-"font-family: Myriad Pro;\n"
-"color: rgb(123, 115, 27);\n"
-"font-size:25px;;\n"
-"background-color: rgb(36, 37, 39);\n"
-"text-decorations: none;\n"
-"border-style:none ;")
-
-        self.gridLayout1.addWidget(self.Contract_id, 4, 0, 1, 1)
 
         self.Task_id = QLineEdit(self.gridLayoutWidget)
         self.Task_id.setObjectName(u"Task_id")
@@ -63,23 +52,7 @@
 "    border-color: rgb(123, 115, 27);\n"
 "border-radius: 15px;")
 
-        self.gridLayout1.addWidget(self.search, 6, 0, 1, 1)
-
-        self.Priority = QLineEdit(self.gridLayoutWidget)
-        self.Priority.setObjectName(u"Priority")
-        self.Priority.setStyleSheet(u"text-align: center;\n"
-"font-family: Myriad Pro;\n"
-"color: rgb(123, 115, 27);\n"
-"font-size:25px;;\n"
-"background-color: rgb(36, 37, 39);\n"
-"text-decorations: none;\n"
-"border-style:none ;")
-
-        self.gridLayout1.addWidget(self.Priority, 2, 0, 1, 1)
-
-
-
-
+        self.gridLayout1.addWidget(self.search, 9, 0, 1, 1)
 
         self.Executor_id = QLineEdit(self.gridLayoutWidget)
         self.Executor_id.setObjectName(u"Executor_id")
@@ -96,7 +69,43 @@
         self.dateTimeEdit = QtWidgets.QDateEdit(self.gridLayoutWidget)
         self.dateTimeEdit.setObjectName(u"dateTimeEdit")
 
-        self.gridLayout1.addWidget(self.dateTimeEdit, 5, 0, 1, 1)
+        self.gridLayout1.addWidget(self.dateTimeEdit, 8, 0, 1, 1)
+
+        self.customer_id = QLineEdit(self.gridLayoutWidget)
+        self.customer_id.setObjectName(u"Priority")
+        self.customer_id.setStyleSheet(u"text-align: center;\n"
+                                   "font-family: Myriad Pro;\n"
+                                   "color: rgb(123, 115, 27);\n"
+                                   "font-size:25px;;\n"
+                                   "background-color: rgb(36, 37, 39);\n"
+                                   "text-decorations: none;\n"
+                                   "border-style:none ;")
+
+        self.gridLayout1.addWidget(self.customer_id, 7, 0, 1, 1)
+
+        self.plate = QLineEdit(self.gridLayoutWidget)
+        self.plate.setObjectName(u"Priority")
+        self.plate.setStyleSheet(u"text-align: center;\n"
+                                    "font-family: Myriad Pro;\n"
+                                    "color: rgb(123, 115, 27);\n"
+                                    "font-size:25px;;\n"
+                                    "background-color: rgb(36, 37, 39);\n"
+                                    "text-decorations: none;\n"
+                                    "border-style:none ;")
+
+        self.gridLayout1.addWidget(self.plate, 5, 0, 1, 1)
+
+        self.part_id = QLineEdit(self.gridLayoutWidget)
+        self.part_id.setObjectName(u"Priority")
+        self.part_id.setStyleSheet(u"text-align: center;\n"
+                                 "font-family: Myriad Pro;\n"
+                                 "color: rgb(123, 115, 27);\n"
+                                 "font-size:25px;;\n"
+                                 "background-color: rgb(36, 37, 39);\n"
+                                 "text-decorations: none;\n"
+                                 "border-style:none ;")
+
+        self.gridLayout1.addWidget(self.part_id, 6, 0, 1, 1)
 
 
         self.retranslateUi(add_task)
@@ -111,14 +120,16 @@
 "p, li { white-space: pre-wrap; }\n"
 "</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
 "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">ADD</span></p></body></html>", None))
-        self.Contract_id.setText(QtCore.QCoreApplication.translate("add_task", u"", None))
-        self.Contract_id.setPlaceholderText("Contract_id")
+        self.customer_id.setText(QtCore.QCoreApplication.translate("add_task", u"", None))
+        self.customer_id.setPlaceholderText("Customer id")
+        self.part_id.setText(QtCore.QCoreApplication.translate("add_task", u"", None))
+        self.part_id.setPlaceholderText("Part id")
+        self.plate.setText(QtCore.QCoreApplication.translate("add_task", u"", None))
+        self.plate.setPlaceholderText("License plate")
         self.Task_id.setText(QtCore.QCoreApplication.translate("add_task", u"", None))
         self.Task_id.setPlaceholderText("Description")
         self.search.setText(QtCore.QCoreApplication.translate("add_task", u"ADD", None))
-        self.Priority.setText(QtCore.QCoreApplication.translate("add_task", u"", None))
-        self.Priority.setPlaceholderText("Priority")
         self.Executor_id.setText(QtCore.QCoreApplication.translate("add_task", u"", None))
-        self.Executor_id.setPlaceholderText("Executor_id")
+        self.Executor_id.setPlaceholderText("Executor id")
     # retranslateUi
 
Index: add_client.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/add_client.py b/Ui/add_client.py
rename from add_client.py
rename to Ui/add_client.py
--- a/add_client.py	(revision e7aa5931294875417ca4344f4f8f31b388789013)
+++ b/Ui/add_client.py	(date 1671640226396)
@@ -37,7 +37,7 @@
 "text-decorations: none;\n"
 "border-style:none ;")
 
-        self.gridLayout1.addWidget(self.Task_id, 1, 0, 1, 1)
+        self.gridLayout1.addWidget(self.Task_id, 3, 0, 1, 1)
 
         self.search = QtWidgets.QPushButton(self.gridLayoutWidget)
         self.search.setObjectName(u"search")
@@ -51,7 +51,7 @@
 "    border-color: rgb(123, 115, 27);\n"
 "border-radius: 15px;")
 
-        self.gridLayout1.addWidget(self.search, 4, 0, 1, 1)
+        self.gridLayout1.addWidget(self.search, 5, 0, 1, 1)
 
         self.Priority = QLineEdit(self.gridLayoutWidget)
         self.Priority.setObjectName(u"Priority")
@@ -63,32 +63,44 @@
 "text-decorations: none;\n"
 "border-style:none ;")
 
-        self.gridLayout1.addWidget(self.Priority, 2, 0, 1, 1)
+        self.gridLayout1.addWidget(self.Priority, 4, 0, 1, 1)
+
+
+        self.fname = QLineEdit(self.gridLayoutWidget)
+        self.fname.setObjectName(u"Executor_id")
+        self.fname.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+
+        self.gridLayout1.addWidget(self.fname, 0, 0, 1, 1)
 
-        self.Status = QLineEdit(self.gridLayoutWidget)
-        self.Status.setObjectName(u"Status")
-        self.Status.setStyleSheet(u"text-align: center;\n"
-"font-family: Myriad Pro;\n"
-"color: rgb(123, 115, 27);\n"
-"font-size:25px;;\n"
-"background-color: rgb(36, 37, 39);\n"
-"text-decorations: none;\n"
-"border-style:none ;")
+        self.sname = QLineEdit(self.gridLayoutWidget)
+        self.sname.setObjectName(u"Executor_id")
+        self.sname.setStyleSheet(u"text-align: center;\n"
+                                 "font-family: Myriad Pro;\n"
+                                 "color: rgb(123, 115, 27);\n"
+                                 "font-size:25px;;\n"
+                                 "background-color: rgb(36, 37, 39);\n"
+                                 "text-decorations: none;\n"
+                                 "border-style:none ;")
 
-        self.gridLayout1.addWidget(self.Status, 3, 0, 1, 1)
+        self.gridLayout1.addWidget(self.sname, 1, 0, 1, 1)
 
-        self.Executor_id = QLineEdit(self.gridLayoutWidget)
-        self.Executor_id.setObjectName(u"Executor_id")
-        self.Executor_id.setStyleSheet(u"text-align: center;\n"
-"font-family: Myriad Pro;\n"
-"color: rgb(123, 115, 27);\n"
-"font-size:25px;;\n"
-"background-color: rgb(36, 37, 39);\n"
-"text-decorations: none;\n"
-"border-style:none ;")
+        self.pname = QLineEdit(self.gridLayoutWidget)
+        self.pname.setObjectName(u"Executor_id")
+        self.pname.setStyleSheet(u"text-align: center;\n"
+                                 "font-family: Myriad Pro;\n"
+                                 "color: rgb(123, 115, 27);\n"
+                                 "font-size:25px;;\n"
+                                 "background-color: rgb(36, 37, 39);\n"
+                                 "text-decorations: none;\n"
+                                 "border-style:none ;")
 
-        self.gridLayout1.addWidget(self.Executor_id, 0, 0, 1, 1)
-
+        self.gridLayout1.addWidget(self.pname, 2, 0, 1, 1)
 
         self.retranslateUi(add_client)
 
@@ -107,9 +119,11 @@
         self.search.setText(QtCore.QCoreApplication.translate("add_client", u"ADD", None))
         self.Priority.setText(QtCore.QCoreApplication.translate("add_client", u"", None))
         self.Priority.setPlaceholderText("Email")
-        self.Status.setText(QtCore.QCoreApplication.translate("add_client", u"", None))
-        self.Status.setPlaceholderText("City")
-        self.Executor_id.setText(QtCore.QCoreApplication.translate("add_client", u"", None))
-        self.Executor_id.setPlaceholderText("Company_Name")
+        self.fname.setText(QtCore.QCoreApplication.translate("add_client", u"", None))
+        self.fname.setPlaceholderText("First Name")
+        self.sname.setText(QtCore.QCoreApplication.translate("add_client", u"", None))
+        self.sname.setPlaceholderText("Second Name")
+        self.pname.setText(QtCore.QCoreApplication.translate("add_client", u"", None))
+        self.pname.setPlaceholderText("Patronymyc")
     # retranslateUi
 
Index: config.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>host=\"127.0.0.1\"\r\ndb_name=\"test_db\"
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/config.py b/config.py
--- a/config.py	(revision e7aa5931294875417ca4344f4f8f31b388789013)
+++ b/config.py	(date 1671634676542)
@@ -1,2 +1,2 @@
 host="127.0.0.1"
-db_name="test_db"
\ No newline at end of file
+db_name="CarService"
\ No newline at end of file
Index: changeTask.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/changeTask.py b/Ui/changeTask.py
rename from changeTask.py
rename to Ui/changeTask.py
--- a/changeTask.py	(revision e7aa5931294875417ca4344f4f8f31b388789013)
+++ b/Ui/changeTask.py	(date 1671645680174)
@@ -27,17 +27,7 @@
         self.gridLayout1 = QtWidgets.QGridLayout(self.gridLayoutWidget)
         self.gridLayout1.setObjectName(u"gridLayout1")
         self.gridLayout1.setContentsMargins(0, 0, 0, 0)
-        self.Contract_id = QLineEdit(self.gridLayoutWidget)
-        self.Contract_id.setObjectName(u"Contract_id")
-        self.Contract_id.setStyleSheet(u"text-align: center;\n"
-"font-family: Myriad Pro;\n"
-"color: rgb(123, 115, 27);\n"
-"font-size:25px;;\n"
-"background-color: rgb(36, 37, 39);\n"
-"text-decorations: none;\n"
-"border-style:none ;")
 
-        self.gridLayout1.addWidget(self.Contract_id, 4, 0, 1, 1)
 
         self.Task_id = QLineEdit(self.gridLayoutWidget)
         self.Task_id.setObjectName(u"Task_id")
@@ -95,8 +85,6 @@
 "p, li { white-space: pre-wrap; }\n"
 "</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
 "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">CHANGE</span></p></body></html>", None))
-        self.Contract_id.setText(QtCore.QCoreApplication.translate("add_task", u"", None))
-        self.Contract_id.setPlaceholderText("Priority")
         self.Task_id.setText(QtCore.QCoreApplication.translate("add_task", u"", None))
         self.Task_id.setPlaceholderText("Executor id")
         self.search.setText(QtCore.QCoreApplication.translate("add_task", u"CHANGE", None))
Index: Ui/ui_task_card.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Ui/ui_task_card.py b/Ui/ui_task_card.py
new file mode 100644
--- /dev/null	(date 1671634950190)
+++ b/Ui/ui_task_card.py	(date 1671634950190)
@@ -0,0 +1,250 @@
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtWidgets import QLineEdit
+
+class ui_task(object):
+    def setupUi(self, Form):
+        if not Form.objectName():
+            Form.setObjectName(u"Form")
+        Form.resize(1390, 148)
+        self.Task_form = QtWidgets.QFrame(Form)
+        self.Task_form.setObjectName(u"Task_form")
+        self.Task_form.setGeometry(QtCore.QRect(10, 0, 1281, 122))
+        self.Task_form.setMinimumSize(QtCore.QSize(1281, 122))
+        self.Task_form.setMaximumSize(QtCore.QSize(1281, 122))
+        self.Task_form.setStyleSheet(u"background-color: rgb(36, 37, 39);\n"
+"border-style:solid ;\n"
+"    border-width: 2px;\n"
+"    border-color: rgb(123, 115, 27);\n"
+"border-radius: 15px;")
+        self.Task_form.setFrameShape(QtWidgets.QFrame.StyledPanel)
+        self.Task_form.setFrameShadow(QtWidgets.QFrame.Raised)
+        self.Task_text = QtWidgets.QTextBrowser(self.Task_form)
+        self.Task_text.setObjectName(u"Task_text")
+        self.Task_text.setGeometry(QtCore.QRect(80, 10, 817, 41))
+        self.Task_text.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Part_id = QtWidgets.QTextBrowser(self.Task_form)
+        self.Part_id.setObjectName(u"Priority")
+        self.Part_id.setGeometry(QtCore.QRect(60, 70, 111, 41))
+        self.Part_id.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Part_id.setAutoFormatting(QtWidgets.QTextEdit.AutoNone)
+        self.Exucutor_id = QtWidgets.QTextBrowser(self.Task_form)
+        self.Exucutor_id.setObjectName(u"Exucutor_id")
+        self.Exucutor_id.setGeometry(QtCore.QRect(276, 70, 125, 41))
+        self.Exucutor_id.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+
+
+        self.License_plate = QtWidgets.QTextBrowser(self.Task_form)
+        self.License_plate.setObjectName(u"License_plate")
+        self.License_plate.setGeometry(QtCore.QRect(507, 70, 140, 41))
+        self.License_plate.setStyleSheet(u"text-align: center;\n"
+                                       "font-family: Myriad Pro;\n"
+                                       "color: rgb(123, 115, 27);\n"
+                                       "font-size:25px;;\n"
+                                       "background-color: rgb(36, 37, 39);\n"
+                                       "text-decorations: none;\n"
+                                       "border-style:none ;")
+
+        self.Service_id = QtWidgets.QTextBrowser(self.Task_form)
+        self.Service_id.setObjectName(u"Service_id")
+        self.Service_id.setGeometry(QtCore.QRect(883, 70, 112, 41))
+        self.Service_id.setStyleSheet(u"text-align: center;\n"
+                                         "font-family: Myriad Pro;\n"
+                                         "color: rgb(123, 115, 27);\n"
+                                         "font-size:25px;;\n"
+                                         "background-color: rgb(36, 37, 39);\n"
+                                         "text-decorations: none;\n"
+                                         "border-style:none ;")
+
+        self.Service_id_number = QtWidgets.QTextBrowser(self.Task_form)
+        self.Service_id_number.setObjectName(u"License_plate_number")
+        self.Service_id_number.setGeometry(QtCore.QRect(1001, 70, 51, 41))
+        self.Service_id_number.setStyleSheet(u"text-align: center;\n"
+                                                "font-family: Myriad Pro;\n"
+                                                "color: rgb(123, 115, 27);\n"
+                                                "font-size:25px;;\n"
+                                                "background-color: rgb(36, 37, 39);\n"
+                                                "text-decorations: none;\n"
+                                                "border-style:none ;")
+
+        self.License_plate_number = QtWidgets.QTextBrowser(self.Task_form)
+        self.License_plate_number.setObjectName(u"License_plate_number")
+        self.License_plate_number.setGeometry(QtCore.QRect(656, 70, 145, 41))
+        self.License_plate_number.setStyleSheet(u"text-align: center;\n"
+                                           "font-family: Myriad Pro;\n"
+                                           "color: rgb(123, 115, 27);\n"
+                                           "font-size:25px;;\n"
+                                           "background-color: rgb(36, 37, 39);\n"
+                                           "text-decorations: none;\n"
+                                           "border-style:none ;")
+
+        self.Task_id = QtWidgets.QTextBrowser(self.Task_form)
+        self.Task_id.setObjectName(u"Task_id")
+        self.Task_id.setGeometry(QtCore.QRect(10, 10, 51, 41))
+        self.Task_id.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Deadline = QtWidgets.QTextBrowser(self.Task_form)
+        self.Deadline.setObjectName(u"Deadline")
+        self.Deadline.setGeometry(QtCore.QRect(1135, 70, 140, 41))
+        self.Deadline.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Deadline.setAutoFormatting(QtWidgets.QTextEdit.AutoNone)
+        self.Task_Status = QtWidgets.QTextBrowser(self.Task_form)
+        self.Task_Status.setObjectName(u"Task_Status")
+        self.Task_Status.setGeometry(QtCore.QRect(1120, 10, 111, 41))
+        self.Task_Status.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Task_Status.setAutoFormatting(QtWidgets.QTextEdit.AutoNone)
+        self.Part_id_number = QtWidgets.QTextBrowser(self.Task_form)
+        self.Part_id_number.setObjectName(u"Priority_number")
+        self.Part_id_number.setGeometry(QtCore.QRect(180, 70, 51, 41))
+        self.Part_id_number.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Executor_number = QtWidgets.QTextBrowser(self.Task_form)
+        self.Executor_number.setObjectName(u"Executor_number")
+        self.Executor_number.setGeometry(QtCore.QRect(405, 70, 51, 41))
+        self.Executor_number.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Change_task = QtWidgets.QPushButton(self.Task_form)
+        self.Change_task.setObjectName(u"Change_task")
+        self.Change_task.setGeometry(QtCore.QRect(10, 70, 41, 41))
+        self.Change_task.setAutoFillBackground(False)
+        self.Change_task.setStyleSheet(u"background-color: rgb(123, 115, 27);\n"
+"border-radius: 20px;")
+        icon = QtGui.QIcon()
+        icon.addFile(u"C:/Users/gosha/PycharmProjects/Just Notes/Source/Settings.png", QtCore.QSize(), QtGui.QIcon.Normal, QtGui.QIcon.Off)
+        self.Change_task.setIcon(icon)
+        self.Change_task.setIconSize(QtCore.QSize(25, 25))
+
+        self.retranslateUi(Form)
+
+        QtCore.QMetaObject.connectSlotsByName(Form)
+    # setupUi
+
+    def retranslateUi(self, Form):
+        Form.setWindowTitle(QtCore.QCoreApplication.translate("Form", u"Form", None))
+        self.Task_text.setHtml(QtCore.QCoreApplication.translate("Form", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">Name</span></p></body></html>", None))
+
+
+        self.Part_id.setHtml(QtCore.QCoreApplication.translate("Form",
+                                                                  u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+                                                                  "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+                                                                  "p, li { white-space: pre-wrap; }\n"
+                                                                  "</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+                                                                  "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Tahoma'; font-size:16pt;\">Part ID:</span></p></body></html>",
+                                                                  None))
+
+        self.Part_id_number.setHtml(QtCore.QCoreApplication.translate("Form",
+                                                                         u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+                                                                         "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+                                                                         "p, li { white-space: pre-wrap; }\n"
+                                                                         "</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+                                                                         "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">12</span></p></body></html>",
+                                                                         None))
+
+        self.Service_id.setHtml(QtCore.QCoreApplication.translate("Form",
+                                                                     u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+                                                                     "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+                                                                     "p, li { white-space: pre-wrap; }\n"
+                                                                     "</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+                                                                     "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Tahoma'; font-size:16pt;\">Service ID:</span></p></body></html>",
+                                                                     None))
+
+        self.License_plate.setHtml(QtCore.QCoreApplication.translate("Form",
+                                                                   u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+                                                                   "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+                                                                   "p, li { white-space: pre-wrap; }\n"
+                                                                   "</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+                                                                   "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Tahoma'; font-size:16pt;\">License Plate:</span></p></body></html>",
+                                                                   None))
+
+        self.Service_id_number.setHtml(QtCore.QCoreApplication.translate("Form",
+                                                                            u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+                                                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+                                                                            "p, li { white-space: pre-wrap; }\n"
+                                                                            "</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+                                                                            "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">12</span></p></body></html>",
+                                                                            None))
+
+        self.License_plate_number.setHtml(QtCore.QCoreApplication.translate("Form",
+                                                                       u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+                                                                       "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+                                                                       "p, li { white-space: pre-wrap; }\n"
+                                                                       "</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+                                                                       "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">A888AA000</span></p></body></html>",
+                                                                       None))
+        self.Exucutor_id.setHtml(QtCore.QCoreApplication.translate("Form", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Tahoma'; font-size:16pt;\">Executor ID:</span></p></body></html>", None))
+        self.Task_id.setHtml(QtCore.QCoreApplication.translate("Form", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">ID:</span></p></body></html>", None))
+        self.Deadline.setHtml(QtCore.QCoreApplication.translate("Form", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">Deadline:</span></p></body></html>", None))
+        self.Task_Status.setHtml(QtCore.QCoreApplication.translate("Form", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">Status:</span></p></body></html>", None))
+
+        self.Executor_number.setHtml(QtCore.QCoreApplication.translate("Form", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">ID</span></p></body></html>", None))
+        self.Change_task.setText("")
+    # retranslateUi
+
Index: order.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order.py b/order.py
new file mode 100644
--- /dev/null	(date 1671646281229)
+++ b/order.py	(date 1671646281229)
@@ -0,0 +1,333 @@
+import PyQt5
+import psycopg2
+from PyQt5 import QtCore
+from PyQt5.QtWidgets import QMainWindow
+
+import config
+import main
+from Ui.add_task import Ui_add_task
+from Ui.changeTask import Ui_change_task
+from Ui.tasks_filrers import Ui_tasks_filters
+from Ui.ui_task_card import ui_task
+from employee import current_user
+
+
+class Task:
+	id = None
+	text = None
+	deadline = None
+	author_id = None
+	executor_id = None
+	contract_id = None
+	Priority = None
+	status = None
+	license_plate = None
+	service_id = None
+	customer_id = None
+	part_id = None
+
+	def __init__(self, id: int, text: str, deadline: PyQt5.QtCore.QDate, author_id: int, executor_id: int, status: str,
+				 license_plate: str, service_id: int, customer_id: int, part_id: int):
+		self.id = id
+		self.text = text
+		self.deadline = deadline
+		self.author_id = author_id
+		self.executor_id = executor_id
+		self.status = status
+		self.license_plate = license_plate
+		self.service_id = service_id
+		self.customer_id = customer_id
+		self.part_id = part_id
+
+
+task = Task
+tasks = []
+ftasks = []
+tasks_cards = []
+
+
+class change(QMainWindow, Ui_change_task):
+	def __init__(self, parent=None):
+		super(change, self).__init__(parent)
+		self.setupUi(self)
+		self.parent = parent
+		Ui_Change_Task_functions.ui_change_func(self)
+		self.Task_id.setText(str(self.parent.executor_id))
+		print(parent.number)
+		print(tasks)
+		self.Priority.setText(self.parent.status)
+		self.dateTimeEdit.setDate(tasks[self.parent.number].deadline)
+		if current_user.id != tasks[self.parent.number].executor_id and current_user.id != tasks[
+			self.parent.number].author_id and not current_user.login == "postgres": self.dateTimeEdit.hide()
+		if current_user.role == "employee": self.Task_id.hide()
+
+	def set(self):
+		self.parent.executor_id = self.Task_id.text()
+		self.parent.status = self.Priority.text()
+		self.parent.deadline = self.dateTimeEdit.text()
+
+		self.parent.Executor_number.setPlainText(str(self.parent.executor_id))
+		self.parent.Deadline.setPlainText(str(self.parent.deadline))
+		self.parent.Task_Status.setPlainText(self.parent.status)
+
+		tasks[self.parent.id - 1].deadline = self.dateTimeEdit.date()
+		tasks[self.parent.id - 1].executor_id = int(self.parent.executor_id)
+		tasks[self.parent.id - 1].status = str(self.parent.status)
+
+		if (self.parent.status == "Finished" or self.parent.status == "finished"):
+			self.parent.Change_task.hide()
+
+		try:
+			connection = psycopg2.connect(
+				host=config.host,
+				user=current_user.login,
+				password=current_user.password,
+				database=config.db_name
+			)
+			connection.autocommit = True
+			with connection.cursor() as cursor:
+				try:
+					cursor.execute(
+						f'UPDATE service_order SET deadline = \'{self.parent.deadline}\',executor_employee_id = {tasks[self.parent.id - 1].executor_id}, status = \'{tasks[self.parent.id - 1].status}\' WHERE order_id = {self.parent.id}')
+					print('Task updated succesfully')
+				except Exception as _ex:
+					print("[INFO] Error. New task not added. Reason: ", _ex)
+
+		except Exception as _ex:
+			print("[INFO] Error while working with PostgreSQL", _ex)
+
+		self.close()
+
+
+class Ui_Change_Task_functions(change):
+	def ui_change_func(self):
+		self.search.clicked.connect(self.set)
+
+
+class task_card(QMainWindow, ui_task):
+	def __init__(self, parent=None):
+		super(task_card, self).__init__(parent)
+		self.setupUi(self)
+		Ui_Task_Card_functions.ui_task_card_f(self)
+
+		self.id = 0
+		self.text = ""
+		self.executor_id = 0
+		self.deadline = ""
+		self.status = ""
+		self.number = 0
+		self.plate = ""
+		self.service_id = 0
+		self.part = 0
+
+	def set(self):
+		self.Task_text.setPlainText(self.text)
+		self.Executor_number.setPlainText(str(self.executor_id))
+		self.Task_id.setPlainText(str(self.id))
+		self.Deadline.setPlainText(str(self.deadline))
+		self.Task_Status.setPlainText(self.status)
+		self.Service_id_number.setPlainText(str(self.service_id))
+		self.Part_id_number.setPlainText(str(self.part))
+		self.License_plate_number.setPlainText(self.plate)
+
+		if (self.status == "Finished" or self.status == "finished"):
+			self.Change_task.hide()
+
+	def openChange(self):
+		self.w7 = change(self)
+		self.w7.show()
+
+
+class Ui_Task_Card_functions(task_card):
+	def ui_task_card_f(self):
+		self.Change_task.clicked.connect(self.openChange)
+
+
+class add_task(QMainWindow):
+	def __init__(self, parent=None):
+		super(add_task, self).__init__(parent)
+		self.setWindowTitle("Add_task")
+		self.ui = Ui_add_task()
+		self.ui.setupUi(self)
+		Ui_Add_Task_functions.ui_add_func(self)
+		self.parent = parent
+		if current_user.role == "employee": self.ui.Executor_id.hide()
+
+	def addTask(self):
+		if current_user.role == "employee":
+			executor_id = current_user.id
+		else:
+			executor_id = int(self.ui.Executor_id.text())
+
+		try:
+			connection = psycopg2.connect(
+				host=config.host,
+				user=current_user.login,
+				password=current_user.password,
+				database=config.db_name
+			)
+			connection.autocommit = True
+			with connection.cursor() as cursor:
+				try:
+					cursor.execute(f'SELECT max(order_id) from service_order')
+					contracts = cursor.fetchall()
+					idt = 1
+					for row in contracts:
+						idt += row[0]
+				except Exception as _ex:
+					print("[INFO] Error. clients view error. Reason: ", _ex)
+		except Exception as _ex:
+			print("[INFO] Error. clients view error. Reason: ", _ex)
+
+		task = Task(idt, str(self.ui.Task_id.text()), self.ui.dateTimeEdit.date(), current_user.id, executor_id,
+					str("Active"), self.ui.plate.text(), current_user.service_id, self.ui.customer_id.text(),
+					self.ui.part_id.text())
+
+		tasks.append(task)
+
+		taskCard = task_card()
+		taskCard.setFixedHeight(122)
+		taskCard.number = len(tasks) - 1
+		taskCard.text = task.text
+		taskCard.id = task.id
+		taskCard.deadline = self.ui.dateTimeEdit.text()
+		taskCard.status = task.status
+		taskCard.executor_id = task.executor_id
+		taskCard.plate = task.license_plate
+		taskCard.service_id = task.service_id
+		taskCard.part = task.part_id
+		taskCard.set()
+
+		tasks_cards.append(taskCard)
+
+		main.MainWindow.AddTVert(self.parent, taskCard)
+
+		###добавить в бд
+
+		currenttime = (QtCore.QDate.currentDate().toString('dd.MM.yyyy'))
+
+		try:
+			connection = psycopg2.connect(
+				host=config.host,
+				user=current_user.login,
+				password=current_user.password,
+				database=config.db_name
+			)
+			connection.autocommit = True
+			with connection.cursor() as cursor:
+				try:
+					cursor.execute(
+						f'INSERT INTO service_order (deadline, appointment_date, executor_employee_id, author_employee_id, description, status, license_plate, customer_id, service_id, part_id) VALUES ('
+						f'\'{taskCard.deadline}\', \'{currenttime}\', {task.executor_id}, {task.author_id}, \'{task.text}\', \'{task.status}\', \'{taskCard.plate}\', {task.customer_id}, {task.service_id}, {task.part_id})')
+					print('New task added succesfully')
+				except Exception as _ex:
+					print("[INFO] Error. New task not added. Reason: ", _ex)
+					return
+		except Exception as _ex:
+			print("[INFO] Error while working with PostgreSQL", _ex)
+			self.close()
+		finally:
+			# if connection:
+			# 	# cursor.close()
+			# connection.close()
+			print("[INFO] PostgreSQL connection closed")
+
+		self.close()
+
+
+class Ui_Add_Task_functions(add_task):
+	def ui_add_func(self):
+		self.ui.search.clicked.connect(self.addTask)
+
+
+class task_filter(QMainWindow):
+	def __init__(self, parent=None):
+		super(task_filter, self).__init__(parent)
+		self.setWindowTitle("Login")
+		self.ui = Ui_tasks_filters()
+		self.ui.setupUi(self)
+		self.parent = parent
+		Ui_task_filter_window.ui_tfilter_func(self)
+
+	def filter_tasks(self):
+		try:
+			connection = psycopg2.connect(
+				host=config.host,
+				user=current_user.login,
+				password=current_user.password,
+				database=config.db_name
+			)
+			connection.autocommit = True
+			with connection.cursor() as cursor:
+				try:
+					query_str = f'SELECT * FROM task'
+					s = 0
+					if self.ui.Author_id.text() != "":
+						query_str += f' WHERE author_employee_id = {int(self.ui.Author_id.text())}'
+						s += 1
+					if self.ui.Executor_id.text() != "":
+						if s == 0:
+							query_str += f' WHERE executor_employee_id = {int(self.ui.Executor_id.text())}'
+						else:
+							query_str += f' AND executor_employee_id = {int(self.ui.Executor_id.text())}'
+						s += 1
+					if self.ui.Task_id.text() != "":
+						if s == 0:
+							query_str += f' WHERE task_id = {int(self.ui.Task_id.text())}'
+						else:
+							query_str += f' AND task_id = {int(self.ui.Task_id.text())}'
+						s += 1
+					if self.ui.Status.text() != "":
+						if s == 0:
+							query_str += f' WHERE status = {self.ui.Status.text()}'
+						else:
+							query_str += f' AND status = {self.ui.Status.text()}'
+						s += 1
+
+					ftasks.clear()
+					cursor.execute(query_str)
+					filtered_tasks = cursor.fetchall()
+
+					print('Filtered tasks:')
+					for row in filtered_tasks:
+						print("deadline = ", row[0], )
+						print("appointment_date = ", row[1])
+						print("executor_employee_id = ", row[2])
+						print("author_employee_id = ", row[3])
+						print("task_id = ", row[4])
+						print("task_description = ", row[5])
+						print("priority = ", row[6])
+						print("status = ", row[7])
+						print("contract_id = ", row[8], "\n")
+						format = "dd.MM.yyyy"
+						tempdate = PyQt5.QtCore.QDate.fromString(row[8], format)
+						task = Task(row[2], row[3], tempdate, row[1], row[0], row[6], row[4], row[5])
+						ftasks.append(task)
+
+					for i in range(len(tasks_cards)):
+						tasks_cards[i].deleteLater()
+					tasks_cards.clear()
+
+					for i in range(len(ftasks)):
+						tasskCard = task_card()
+
+						tasskCard.setFixedHeight(122)
+						tasskCard.text = ftasks[i].text
+						tasskCard.id = ftasks[i].id
+						tasskCard.deadline = ftasks[i].deadline.toString('yyyy.MM.dd')
+						tasskCard.status = ftasks[i].status
+						tasskCard.executor_id = ftasks[i].executor_id
+						tasskCard.set()
+
+						tasks_cards.append(tasskCard)
+					main.MainWindow.AddTVert(self.parent, tasks_cards[i])
+
+				except Exception as _ex:
+					print("[INFO] Error. Task filter error. Reason: ", _ex)
+		except Exception as _ex:
+			print("[INFO] Error. Task filter error. Reason: ", _ex)
+
+
+class Ui_task_filter_window(task_filter):
+	def ui_tfilter_func(self):
+		self.ui.search.clicked.connect(self.filter_tasks)
Index: employee.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/employee.py b/employee.py
new file mode 100644
--- /dev/null	(date 1671637993594)
+++ b/employee.py	(date 1671637993594)
@@ -0,0 +1,167 @@
+import psycopg2
+from PyQt5.QtWidgets import QMainWindow
+
+import config
+import main
+from Ui.Ui_employee import Ui_usercard
+from Ui.employee_filters import Ui_Employee_filters
+
+
+class Employee:
+	id = None
+	role = None
+	name = None
+	phone = None
+	email = None
+	service_id = None
+
+	def __init__(self, id: int, role: str, name: str, phone: int, email: str, service_id: int):
+		self.id = id
+		self.role = role
+		self.name = name
+		self.phone = phone
+		self.email = email
+		self.service_id = service_id
+
+class User:
+	login = None
+	role = None
+	id = 8
+	password = None
+	service_id = 5
+
+
+current_user = User
+employee = Employee
+
+employees = []
+femployees = []
+employees_cards = []
+
+
+class user_card(QMainWindow, Ui_usercard):
+	def __init__(self):
+		super(user_card, self).__init__()
+		self.setupUi(self)
+
+		self.id = 0
+		self.name = ""
+		self.email = ""
+		self.phone = ""
+		self.role = ""
+		self.number = 0
+
+	def set(self):
+		self.id_text.setPlainText(str(self.id))
+		self.email_text.setPlainText(str(self.email))
+		self.role_text.setPlainText(str(self.role))
+		self.phone_text.setPlainText(str(self.phone))
+		self.Name_text.setPlainText(str(self.name))
+
+
+
+
+
+class employee_filter(QMainWindow):
+	def __init__(self, parent=None):
+		super(employee_filter, self).__init__(parent)
+		self.setWindowTitle("Login")
+		self.ui = Ui_Employee_filters()
+		self.ui.setupUi(self)
+		self.parent = parent
+		Ui_employee_filter_window.ui_efilter_func(self)
+
+	def filter_employee(self):
+		try:
+			connection = psycopg2.connect(
+				host=config.host,
+				user=current_user.login,
+				password=current_user.password,
+				database=config.db_name
+			)
+			connection.autocommit = True
+			with connection.cursor() as cursor:
+				try:
+					query_str = f'SELECT * FROM employee'
+					s = 0
+					if self.ui.fname.text() != "":
+						query_str += f' WHERE first_name = \'{self.ui.fname.text()}\''
+						s += 1
+					if self.ui.sname.text() != "":
+						if s == 0:
+							query_str += f' WHERE last_name = \'{self.ui.sname.text()}\''
+						else:
+							query_str += f' AND last_name = \'{self.ui.sname.text()}\''
+						s += 1
+					if self.ui.pname.text() != "":
+						if s == 0:
+							query_str += f' WHERE patronymyc = \'{self.ui.pname.text()}\''
+						else:
+							query_str += f' AND patronymyc = \'{self.ui.pname.text()}\''
+						s += 1
+					if self.ui.phone.text() != "":
+						if s == 0:
+							query_str += f' WHERE phone_number = {int(self.ui.phone.text())}'
+						else:
+							query_str += f' AND phone_number = {int(self.ui.phone.text())}'
+						s += 1
+					if self.ui.email.text() != "":
+						if s == 0:
+							query_str += f' WHERE email = \'{self.ui.email.text()}\''
+						else:
+							query_str += f' AND email = \'{self.ui.email.text()}\''
+						s += 1
+					if self.ui.role.text() != "":
+						if s == 0:
+							query_str += f' WHERE job_title = \'{self.ui.role.text()}\''
+						else:
+							query_str += f' AND job_title = \'{self.ui.role.text()}\''
+						s += 1
+
+					femployees.clear()
+					cursor.execute(query_str)
+					filtered_employees = cursor.fetchall()
+
+					print('Filtered employees:')
+					for row in filtered_employees:
+						print("job_title = ", row[0], )
+						print("first_name = ", row[1])
+						print("last_name = ", row[2])
+						print("patronymyc = ", row[3])
+						print("phone_number = ", row[4])
+						print("email = ", row[5])
+						print("employee_id = ", row[6])
+						print("username = ", row[7])
+						print("password = ", row[8], "\n")
+
+						employee = Employee(row[6], row[0], row[1] + " " + row[2] + " " + row[3], row[4], row[5])
+						femployees.append(employee)
+
+						for i in range(len(employees_cards)):
+							employees_cards[i].deleteLater()
+						employees_cards.clear()
+
+						for i in range(len(femployees)):
+							employee_card = user_card()
+
+							employee_card.setFixedHeight(122)
+							employee_card.id = femployees[i].id
+							employee_card.name = femployees[i].name
+							employee_card.phone = femployees[i].phone
+							employee_card.email = femployees[i].email
+							employee_card.role = femployees[i].role
+							employee_card.set()
+
+							employees_cards.append(employee_card)
+
+							main.MainWindow.AddTVert(self.parent, employees_cards[i])
+
+				except Exception as _ex:
+					print("[INFO] Error. Employee filter error. Reason: ", _ex)
+		except Exception as _ex:
+			print("[INFO] Error. Employee filter error. Reason: ", _ex)
+
+
+class Ui_employee_filter_window(employee_filter):
+	def ui_efilter_func(self):
+		self.ui.search.clicked.connect(self.filter_employee)
\ No newline at end of file
Index: widget_classes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import PyQt5\r\nfrom PyQt5 import QtCore\r\nimport PySide6\r\nfrom PySide6 import QtCore\r\n\r\nclass Task:\r\n\tid = None\r\n\ttext = None\r\n\tdeadline = None\r\n\tauthor_id = None\r\n\texecutor_id = None\r\n\tcontract_id = None\r\n\tPriority = None\r\n\tstatus = None\r\n\r\n\tdef __init__(self, id: int, text: str, deadline: PyQt5.QtCore.QDate, author_id: int, executor_id: int, contract_id: int, Priority: int, status: str):\r\n\t\tself.id = id\r\n\t\tself.text = text\r\n\t\tself.deadline = deadline\r\n\t\tself.author_id = author_id\r\n\t\tself.executor_id = executor_id\r\n\t\tself.contract_id = contract_id\r\n\t\tself.Priority = Priority\r\n\t\tself.status = status\r\n\r\n\r\n\r\n\r\nclass Client:\r\n\tid = None\r\n\ttitle = None\r\n\tphone = None\r\n\temail = None\r\n\tcity = None\r\n\r\n\tdef __init__(self, id: int, title: str, phone: int, email: str, city: str):\r\n\t\tself.id = id\r\n\t\tself.title = title\r\n\t\tself.city = city\r\n\t\tself.phone = phone\r\n\t\tself.email = email\r\n\r\nclass Employee:\r\n\tid = None\r\n\trole = None\r\n\tname = None\r\n\tphone = None\r\n\temail = None\r\n\r\n\tdef __init__(self, id: int, role: str, name: str, phone: int, email: str):\r\n\t\tself.id = id\r\n\t\tself.role = role\r\n\t\tself.name = name\r\n\t\tself.phone = phone\r\n\t\tself.email = email\r\n\r\n\r\nclass User:\r\n\tlogin = None\r\n\trole = None\r\n\tid = 1\r\n\tpassword = None\r\n\r\n\r\ncurrent_user = User\r\nemployee = Employee\r\nclient = Client\r\ntask = Task\r\n\r\ntasks = []\r\nclients = []\r\nemployees = []\r\n\r\nftasks = []\r\nfclients = []\r\nfemployees = []\r\n\r\ntasks_cards = []\r\nclients_cards = []\r\nemployees_cards = []\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/widget_classes.py b/widget_classes.py
--- a/widget_classes.py	(revision e7aa5931294875417ca4344f4f8f31b388789013)
+++ b/widget_classes.py	(date 1671638141822)
@@ -1,83 +1,64 @@
-import PyQt5
-from PyQt5 import QtCore
-import PySide6
-from PySide6 import QtCore
+class Service:
+	id = None
+	name = None
+	address = None
+	Phone = None
+	manager = None
 
-class Task:
+	def __init__(self, id: int, name: str, address: str, Phone: str, manager: str):
+		self.id = id
+		self.name = name
+		self.address = address
+		self.Phone = Phone
+		self.manager = manager
+
+class Part:
 	id = None
-	text = None
-	deadline = None
-	author_id = None
-	executor_id = None
-	contract_id = None
-	Priority = None
-	status = None
+	name = None
+	price = None
+	manufacturer = None
 
-	def __init__(self, id: int, text: str, deadline: PyQt5.QtCore.QDate, author_id: int, executor_id: int, contract_id: int, Priority: int, status: str):
+	def __init__(self, id: int, name: str, price: int, manufacturer: str):
 		self.id = id
-		self.text = text
-		self.deadline = deadline
-		self.author_id = author_id
-		self.executor_id = executor_id
-		self.contract_id = contract_id
-		self.Priority = Priority
-		self.status = status
-
+		self.name = name
+		self.price = price
+		self.manufacturer = manufacturer
 
-
-
-class Client:
+class Model:
 	id = None
-	title = None
-	phone = None
-	email = None
-	city = None
+	name = None
+	brand_id = None
+	model_year = None
 
-	def __init__(self, id: int, title: str, phone: int, email: str, city: str):
+	def __init__(self, id: int, name: str, brand_id: int, model_year: int):
 		self.id = id
-		self.title = title
-		self.city = city
-		self.phone = phone
-		self.email = email
+		self.name = name
+		self.brand_id = brand_id
+		self.model_year = model_year
 
-class Employee:
+class Car_brand:
 	id = None
-	role = None
 	name = None
-	phone = None
-	email = None
 
-	def __init__(self, id: int, role: str, name: str, phone: int, email: str):
+	def __init__(self, id: int, name: str):
 		self.id = id
-		self.role = role
 		self.name = name
-		self.phone = phone
-		self.email = email
 
+class Car:
+	license_plate = None
+	color = None
+	estimated_value = None
+	car_model_id = None
 
-class User:
-	login = None
-	role = None
-	id = 1
-	password = None
+	def __init__(self, license_plate: str, color: str, estimated_value: int, car_model_id: int):
+		self.license_plate = license_plate
+		self.color = color
+		self.estimated_value = estimated_value
+		self.car_model_id = car_model_id
 
 
-current_user = User
-employee = Employee
-client = Client
-task = Task
 
-tasks = []
-clients = []
-employees = []
 
-ftasks = []
-fclients = []
-femployees = []
-
-tasks_cards = []
-clients_cards = []
-employees_cards = []
 
 
 
Index: client.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client.py b/client.py
new file mode 100644
--- /dev/null	(date 1671644395637)
+++ b/client.py	(date 1671644395637)
@@ -0,0 +1,225 @@
+import psycopg2
+from PyQt5.QtWidgets import QMainWindow
+
+import config
+import main
+from Ui.Ui_company import Ui_clientcard
+from Ui.add_client import Ui_add_client
+from Ui.company_filters import Ui_CLients_filters
+from employee import current_user
+
+
+class Client:
+	id = None
+	name = None
+	phone = None
+	email = None
+	pName = None
+	sName = None
+	fName = None
+
+	def __init__(self, id: int, fName: str, sName: str, pName: str, phone: int, email: str):
+		self.id = id
+		self.fName = fName
+		self.sName = sName
+		self.pName = pName
+		self.phone = phone
+		self.email = email
+
+client = Client
+clients = []
+fclients = []
+clients_cards = []
+
+class client_card(QMainWindow, Ui_clientcard):
+	def __init__(self):
+		super(client_card, self).__init__()
+		self.setupUi(self)
+
+		self.id = 0
+		self.name = ""
+		self.phone = ""
+		self.email = ""
+		self.number = 0
+
+	def set(self):
+		self.Email_text.setPlainText(str(self.id))
+		self.Email_text_2.setPlainText(self.title)
+		self.Phone_text.setPlainText(str(self.city))
+		self.Name_text.setPlainText(str(self.phone))
+		self.Role_text.setPlainText(str(self.email))
+
+class add_client(QMainWindow):
+	def __init__(self, parent=None):
+		super(add_client, self).__init__(parent)
+		self.setWindowTitle("Add_client")
+		self.ui = Ui_add_client()
+		self.ui.setupUi(self)
+		Ui_Add_Client_functions.ui_add_func(self)
+		self.parent = parent
+
+	def addClient(self):
+		try:
+			# connect to exist database
+			connection = psycopg2.connect(
+				host=config.host,
+				user=current_user.login,
+				password=current_user.password,
+				database=config.db_name
+			)
+			connection.autocommit = True
+			with connection.cursor() as cursor:
+				try:
+					cursor.execute(
+						f'SELECT client_id FROM client WHERE client_id = (select max(client-id) from client)')
+					contracts = cursor.fetchall()
+					idc = 1
+					for row in contracts:
+						idc += row[0]
+				except Exception as _ex:
+					print("[INFO] Error. clients view error. Reason: ", _ex)
+					return
+		except Exception as _ex:
+			print("[INFO] Error. clients view error. Reason: ", _ex)
+
+		client = Client(idc, self.ui.Executor_id.text(), int(self.ui.Task_id.text()), self.ui.Priority.text(),
+						self.ui.Status.text())
+		clients.append(client)
+
+		clientCard = client_card()
+
+		clientCard.setFixedHeight(122)
+		clientCard.id = client.id
+		clientCard.number = len(client) - 1
+		clientCard.title = self.ui.Executor_id.text()
+		clientCard.phone = self.ui.Task_id.text()
+		clientCard.email = self.ui.Priority.text()
+		clientCard.city = self.ui.Status.text()
+		clientCard.set()
+
+		clients_cards.append(clientCard)
+
+		self.ui.Executor_id.setText("")
+		self.ui.Task_id.setText("")
+		self.ui.Priority.setText("")
+		self.ui.Status.setText("")
+
+		main.MainWindow.AddTVert(self.parent, clientCard)
+
+		###добавить в бд
+
+		try:
+			# connect to exist database
+			connection = psycopg2.connect(
+				host=config.host,
+				user=current_user.login,
+				password=current_user.password,
+				database=config.db_name
+			)
+			connection.autocommit = True
+
+			with connection.cursor() as cursor:
+				try:
+					cursor.execute(
+						f'INSERT INTO client (phone_number, email, company_name, registration_city) VALUES ({client.phone}, \'{client.email}\', \'{client.title}\', \'{client.city}\')')
+					print('New client added succesfully')
+				except Exception as _ex:
+					print("[INFO] Error. New client not added. Reason: ", _ex)
+
+		except Exception as _ex:
+			print("[INFO] Error while working with PostgreSQL", _ex)
+		finally:
+			print("[INFO] PostgreSQL connection closed")
+
+		self.close()
+
+
+class Ui_Add_Client_functions(add_client):
+	def ui_add_func(self):
+		self.ui.search.clicked.connect(self.addClient)
+
+
+class company_filter(QMainWindow):
+	def __init__(self, parent=None):
+		super(company_filter, self).__init__(parent)
+		self.setWindowTitle("Login")
+		self.ui = Ui_CLients_filters()
+		self.ui.setupUi(self)
+		self.parent = parent
+		Ui_company_filter_window.ui_cfilter_func(self)
+
+	def filter_client(self):
+		try:
+			connection = psycopg2.connect(
+				host=config.host,
+				user=current_user.login,
+				password=current_user.password,
+				database=config.db_name
+			)
+			connection.autocommit = True
+
+			with connection.cursor() as cursor:
+				try:
+					query_str = f'SELECT * FROM client'
+					s = 0
+					if self.ui.company_name.text() != "":
+						query_str += f' WHERE company_name = \'{self.ui.company_name.text()}\''
+						s += 1
+					if self.ui.city.text() != "":
+						if s == 0:
+							query_str += f' WHERE registration_city = \'{self.ui.city.text()}\''
+						else:
+							query_str += f' AND registration_city = \'{self.ui.city.text()}\''
+						s += 1
+					if self.ui.email.text() != "":
+						if s == 0:
+							query_str += f' WHERE email = \'{self.ui.email.text()}\''
+						else:
+							query_str += f' AND email = \'{self.ui.email.text()}\''
+						s += 1
+					if self.ui.phone.text() != "":
+						if s == 0:
+							query_str += f' WHERE phone_number = {int(self.ui.phone.text())}'
+						else:
+							query_str += f' AND phone_number = {int(self.ui.phone.text())}'
+						s += 1
+
+					fclients.clear()
+					cursor.execute(query_str)
+					filtered_clients = cursor.fetchall()
+
+					print('Filtered tasks:')
+					for row in filtered_clients:
+						fclient = Client(row[0], row[3], row[1], row[2], row[4])
+						fclients.append(fclient)
+
+					for i in range(len(clients_cards)):
+						clients_cards[i].deleteLater()
+					clients_cards.clear()
+
+					for i in range(len(fclients)):
+						clientCard = client_card()
+
+						clientCard.setFixedHeight(122)
+						clientCard.id = fclients[i].id
+						clientCard.title = fclients[i].title
+						clientCard.phone = fclients[i].phone
+						clientCard.email = fclients[i].email
+						clientCard.city = fclients[i].city
+						clientCard.set()
+
+						clients_cards.append(clientCard)
+
+						main.MainWindow.AddTVert(self.parent, clients_cards[i])
+
+				except Exception as _ex:
+					print("[INFO] Error. Client filter error. Reason: ", _ex)
+		except Exception as _ex:
+			print("[INFO] Error. Client filter error. Reason: ", _ex)
+
+
+class Ui_company_filter_window(company_filter):
+	def ui_cfilter_func(self):
+		self.ui.search.clicked.connect(self.filter_client)
+
+
Index: Ui/ui_car_brand.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Ui/ui_car_brand.py b/Ui/ui_car_brand.py
new file mode 100644
--- /dev/null	(date 1671650888745)
+++ b/Ui/ui_car_brand.py	(date 1671650888745)
@@ -0,0 +1,61 @@
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import QRect, QSize, QCoreApplication, QMetaObject
+from PyQt5.QtWidgets import QLineEdit, QFrame, QTextBrowser, QTextEdit
+
+class Ui_Part_widget(object):
+    def setupUi(self, Part_widget):
+        if not Part_widget.objectName():
+            Part_widget.setObjectName(u"Part_widget")
+        Part_widget.resize(1322, 132)
+        self.Part_frame = QFrame(Part_widget)
+        self.Part_frame.setObjectName(u"Part_frame")
+        self.Part_frame.setGeometry(QRect(0, 0, 1281, 61))
+        self.Part_frame.setMinimumSize(QSize(1240, 61))
+        self.Part_frame.setMaximumSize(QSize(1281, 61))
+        self.Part_frame.setStyleSheet(u"background-color: rgb(36, 37, 39);\n"
+"border-style:solid ;\n"
+"    border-width: 2px;\n"
+"    border-color: rgb(123, 115, 27);\n"
+"border-radius: 15px;")
+        self.Part_frame.setFrameShape(QFrame.StyledPanel)
+        self.Part_frame.setFrameShadow(QFrame.Raised)
+        self.Car_brand = QTextBrowser(self.Part_frame)
+        self.Car_brand.setObjectName(u"Car_brand")
+        self.Car_brand.setGeometry(QRect(100, 10, 1091, 41))
+        self.Car_brand.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.ID = QTextBrowser(self.Part_frame)
+        self.ID.setObjectName(u"ID")
+        self.ID.setGeometry(QRect(10, 10, 31, 41))
+        self.ID.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+
+        self.retranslateUi(Part_widget)
+
+        QMetaObject.connectSlotsByName(Part_widget)
+    # setupUi
+
+    def retranslateUi(self, Part_widget):
+        Part_widget.setWindowTitle(QCoreApplication.translate("Part_widget", u"Form", None))
+        self.Car_brand.setHtml(QCoreApplication.translate("Part_widget", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">Car_brand</span></p></body></html>", None))
+        self.ID.setHtml(QCoreApplication.translate("Part_widget", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Tahoma'; font-size:16pt;\">ID</span></p></body></html>", None))
+    # retranslateUi
+
Index: Ui/ui_car.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Ui/ui_car.py b/Ui/ui_car.py
new file mode 100644
--- /dev/null	(date 1671650888738)
+++ b/Ui/ui_car.py	(date 1671650888738)
@@ -0,0 +1,140 @@
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import QRect, QSize, QCoreApplication, QMetaObject
+from PyQt5.QtWidgets import QLineEdit, QFrame, QTextBrowser, QTextEdit
+
+
+class Ui_Part_widget(object):
+    def setupUi(self, Part_widget):
+        if not Part_widget.objectName():
+            Part_widget.setObjectName(u"Part_widget")
+        Part_widget.resize(1322, 132)
+        self.Part_frame = QFrame(Part_widget)
+        self.Part_frame.setObjectName(u"Part_frame")
+        self.Part_frame.setGeometry(QRect(0, 0, 1281, 122))
+        self.Part_frame.setMinimumSize(QSize(1240, 122))
+        self.Part_frame.setMaximumSize(QSize(1281, 122))
+        self.Part_frame.setStyleSheet(u"background-color: rgb(36, 37, 39);\n"
+"border-style:solid ;\n"
+"    border-width: 2px;\n"
+"    border-color: rgb(123, 115, 27);\n"
+"border-radius: 15px;")
+        self.Part_frame.setFrameShape(QFrame.StyledPanel)
+        self.Part_frame.setFrameShadow(QFrame.Raised)
+        self.Plate = QTextBrowser(self.Part_frame)
+        self.Plate.setObjectName(u"Plate")
+        self.Plate.setGeometry(QRect(100, 10, 1091, 41))
+        self.Plate.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Color = QTextBrowser(self.Part_frame)
+        self.Color.setObjectName(u"Color")
+        self.Color.setGeometry(QRect(10, 70, 141, 41))
+        self.Color.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Color.setAutoFormatting(QTextEdit.AutoNone)
+        self.Model = QTextBrowser(self.Part_frame)
+        self.Model.setObjectName(u"Model")
+        self.Model.setGeometry(QRect(1100, 70, 131, 41))
+        self.Model.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Model.setAutoFormatting(QTextEdit.AutoNone)
+        self.Color_number = QTextBrowser(self.Part_frame)
+        self.Color_number.setObjectName(u"Color_number")
+        self.Color_number.setGeometry(QRect(150, 73, 221, 41))
+        self.Color_number.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Model_number = QTextBrowser(self.Part_frame)
+        self.Model_number.setObjectName(u"Model_number")
+        self.Model_number.setGeometry(QRect(1240, 73, 31, 41))
+        self.Model_number.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Value_number = QTextBrowser(self.Part_frame)
+        self.Value_number.setObjectName(u"Value_number")
+        self.Value_number.setGeometry(QRect(680, 73, 131, 41))
+        self.Value_number.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Value = QTextBrowser(self.Part_frame)
+        self.Value.setObjectName(u"Value")
+        self.Value.setGeometry(QRect(460, 70, 221, 41))
+        self.Value.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Value.setAutoFormatting(QTextEdit.AutoNone)
+
+        self.retranslateUi(Part_widget)
+
+        QMetaObject.connectSlotsByName(Part_widget)
+    # setupUi
+
+    def retranslateUi(self, Part_widget):
+        Part_widget.setWindowTitle(QCoreApplication.translate("Part_widget", u"Form", None))
+        self.Plate.setHtml(QCoreApplication.translate("Part_widget", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">license_plate</span></p></body></html>", None))
+        self.Color.setHtml(QCoreApplication.translate("Part_widget", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">Color:</span></p></body></html>", None))
+        self.Model.setHtml(QCoreApplication.translate("Part_widget", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">Model ID:</span></p></body></html>", None))
+        self.Color_number.setHtml(QCoreApplication.translate("Part_widget", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Tahoma'; font-size:16pt;\">ID</span></p></body></html>", None))
+        self.Model_number.setHtml(QCoreApplication.translate("Part_widget", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Tahoma'; font-size:16pt;\">ID</span></p></body></html>", None))
+        self.Value_number.setHtml(QCoreApplication.translate("Part_widget", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Tahoma'; font-size:16pt;\">ID</span></p></body></html>", None))
+        self.Value.setHtml(QCoreApplication.translate("Part_widget", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">Estimated Value:</span></p></body></html>", None))
+    # retranslateUi
+
Index: Ui/ui_part.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Ui/ui_part.py b/Ui/ui_part.py
new file mode 100644
--- /dev/null	(date 1671651003657)
+++ b/Ui/ui_part.py	(date 1671651003657)
@@ -0,0 +1,93 @@
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import QRect, QSize, QCoreApplication, QMetaObject
+from PyQt5.QtWidgets import QLineEdit, QFrame, QTextBrowser, QTextEdit
+
+class Ui_Part_widget(object):
+    def setupUi(self, Part_widget):
+        if not Part_widget.objectName():
+            Part_widget.setObjectName(u"Part_widget")
+        Part_widget.resize(1322, 132)
+        self.Part_frame = QFrame(Part_widget)
+        self.Part_frame.setObjectName(u"Part_frame")
+        self.Part_frame.setGeometry(QRect(0, 0, 1281, 122))
+        self.Part_frame.setMinimumSize(QSize(1240, 122))
+        self.Part_frame.setMaximumSize(QSize(1281, 122))
+        self.Part_frame.setStyleSheet(u"background-color: rgb(36, 37, 39);\n"
+"border-style:solid ;\n"
+"    border-width: 2px;\n"
+"    border-color: rgb(123, 115, 27);\n"
+"border-radius: 15px;")
+        self.Part_frame.setFrameShape(QFrame.StyledPanel)
+        self.Part_frame.setFrameShadow(QFrame.Raised)
+        self.Part_name = QTextBrowser(self.Part_frame)
+        self.Part_name.setObjectName(u"Part_name")
+        self.Part_name.setGeometry(QRect(540, 10, 191, 41))
+        self.Part_name.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Manufacture = QTextBrowser(self.Part_frame)
+        self.Manufacture.setObjectName(u"Manufacture")
+        self.Manufacture.setGeometry(QRect(10, 70, 721, 41))
+        self.Manufacture.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Manufacture.setAutoFormatting(QTextEdit.AutoNone)
+        self.ID = QTextBrowser(self.Part_frame)
+        self.ID.setObjectName(u"ID")
+        self.ID.setGeometry(QRect(10, 10, 31, 41))
+        self.ID.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Price = QTextBrowser(self.Part_frame)
+        self.Price.setObjectName(u"Price")
+        self.Price.setGeometry(QRect(1010, 70, 221, 41))
+        self.Price.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Price.setAutoFormatting(QTextEdit.AutoNone)
+
+        self.retranslateUi(Part_widget)
+
+        QMetaObject.connectSlotsByName(Part_widget)
+    # setupUi
+
+    def retranslateUi(self, Part_widget):
+        Part_widget.setWindowTitle(QCoreApplication.translate("Part_widget", u"Form", None))
+        self.Part_name.setHtml(QCoreApplication.translate("Part_widget", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">Part_name</span></p></body></html>", None))
+        self.Manufacture.setHtml(QCoreApplication.translate("Part_widget", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">manufacture</span></p></body></html>", None))
+        self.ID.setHtml(QCoreApplication.translate("Part_widget", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Tahoma'; font-size:16pt;\">ID</span></p></body></html>", None))
+        self.Price.setHtml(QCoreApplication.translate("Part_widget", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">price</span></p></body></html>", None))
+    # retranslateUi
+
Index: Ui/ui_model_data.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Ui/ui_model_data.py b/Ui/ui_model_data.py
new file mode 100644
--- /dev/null	(date 1671650888742)
+++ b/Ui/ui_model_data.py	(date 1671650888742)
@@ -0,0 +1,123 @@
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import QRect, QSize, QCoreApplication, QMetaObject
+from PyQt5.QtWidgets import QLineEdit, QFrame, QTextBrowser, QTextEdit
+
+class Ui_Part_widget(object):
+    def setupUi(self, Part_widget):
+        if not Part_widget.objectName():
+            Part_widget.setObjectName(u"Part_widget")
+        Part_widget.resize(1322, 132)
+        self.Part_frame = QFrame(Part_widget)
+        self.Part_frame.setObjectName(u"Part_frame")
+        self.Part_frame.setGeometry(QRect(0, 0, 1281, 122))
+        self.Part_frame.setMinimumSize(QSize(1240, 122))
+        self.Part_frame.setMaximumSize(QSize(1281, 122))
+        self.Part_frame.setStyleSheet(u"background-color: rgb(36, 37, 39);\n"
+"border-style:solid ;\n"
+"    border-width: 2px;\n"
+"    border-color: rgb(123, 115, 27);\n"
+"border-radius: 15px;")
+        self.Part_frame.setFrameShape(QFrame.StyledPanel)
+        self.Part_frame.setFrameShadow(QFrame.Raised)
+        self.Part_name = QTextBrowser(self.Part_frame)
+        self.Part_name.setObjectName(u"Part_name")
+        self.Part_name.setGeometry(QRect(100, 10, 1091, 41))
+        self.Part_name.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Manufacture = QTextBrowser(self.Part_frame)
+        self.Manufacture.setObjectName(u"Manufacture")
+        self.Manufacture.setGeometry(QRect(10, 70, 141, 41))
+        self.Manufacture.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Manufacture.setAutoFormatting(QTextEdit.AutoNone)
+        self.ID = QTextBrowser(self.Part_frame)
+        self.ID.setObjectName(u"ID")
+        self.ID.setGeometry(QRect(10, 10, 31, 41))
+        self.ID.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Price = QTextBrowser(self.Part_frame)
+        self.Price.setObjectName(u"Price")
+        self.Price.setGeometry(QRect(1100, 70, 131, 41))
+        self.Price.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Price.setAutoFormatting(QTextEdit.AutoNone)
+        self.ID_2 = QTextBrowser(self.Part_frame)
+        self.ID_2.setObjectName(u"ID_2")
+        self.ID_2.setGeometry(QRect(150, 73, 31, 41))
+        self.ID_2.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.ID_3 = QTextBrowser(self.Part_frame)
+        self.ID_3.setObjectName(u"ID_3")
+        self.ID_3.setGeometry(QRect(1240, 73, 31, 41))
+        self.ID_3.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+
+        self.retranslateUi(Part_widget)
+
+        QMetaObject.connectSlotsByName(Part_widget)
+    # setupUi
+
+    def retranslateUi(self, Part_widget):
+        Part_widget.setWindowTitle(QCoreApplication.translate("Part_widget", u"Form", None))
+        self.Part_name.setHtml(QCoreApplication.translate("Part_widget", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">Model_name</span></p></body></html>", None))
+        self.Manufacture.setHtml(QCoreApplication.translate("Part_widget", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">Model Year:</span></p></body></html>", None))
+        self.ID.setHtml(QCoreApplication.translate("Part_widget", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Tahoma'; font-size:16pt;\">ID</span></p></body></html>", None))
+        self.Price.setHtml(QCoreApplication.translate("Part_widget", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">Brand ID:</span></p></body></html>", None))
+        self.ID_2.setHtml(QCoreApplication.translate("Part_widget", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Tahoma'; font-size:16pt;\">ID</span></p></body></html>", None))
+        self.ID_3.setHtml(QCoreApplication.translate("Part_widget", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Tahoma'; font-size:16pt;\">ID</span></p></body></html>", None))
+    # retranslateUi
+
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"16b2a115-02f1-46e4-baaf-07c4678b2512\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/vcs.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Ui_company.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/Ui_employee.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/add_client.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/add_task.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/changeTask.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/company_filters.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/config.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/employee_filters.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/tasks_filrers.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/ui_download.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/ui_task_card.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/widget_classes.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/NoteClass.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Source/AddCollection.png\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Source/AddCollection.png\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/database.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/database.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/firebase-sdk.json\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/firebase.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/noteWidget.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/noteWidget.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/notebd.db\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/ui_autorization.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/ui_autorization.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/ui_functions.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/ui_functions.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/ui_main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/ui_main.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/ui_note.py\" beforeDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"27CTFC6zPMP7GHgw8tRFkZGvYu2\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"com.intellij.ide.scratch.ScratchImplUtil$2/New Scratch File\" value=\"JSON\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\" />\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.main\">\r\n    <configuration name=\"database\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Just Notes\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/database.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"firebase\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Just Notes\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/firebase.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"hash_penos\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Just Notes\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/hash_penos.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"Just Notes\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"ui_autorization\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Just Notes\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/ui_autorization.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"ui_registration\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Just Notes\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/../../../../Qt/Disignes\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/../../../../Qt/Disignes/ui_registration.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.database\" />\r\n        <item itemvalue=\"Python.hash_penos\" />\r\n        <item itemvalue=\"Python.ui_autorization\" />\r\n        <item itemvalue=\"Python.ui_registration\" />\r\n        <item itemvalue=\"Python.firebase\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"16b2a115-02f1-46e4-baaf-07c4678b2512\" name=\"Changes\" comment=\"\" />\r\n      <created>1648822961547</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1648822961547</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <default-breakpoints>\r\n        <breakpoint type=\"python-exception\">\r\n          <properties notifyOnTerminate=\"true\" exception=\"BaseException\">\r\n            <option name=\"notifyOnTerminate\" value=\"true\" />\r\n          </properties>\r\n        </breakpoint>\r\n      </default-breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e7aa5931294875417ca4344f4f8f31b388789013)
+++ b/.idea/workspace.xml	(date 1671650204628)
@@ -1,33 +1,41 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="16b2a115-02f1-46e4-baaf-07c4678b2512" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Ui_company.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/Ui_employee.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/add_client.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/add_task.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/changeTask.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/company_filters.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/config.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/employee_filters.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/tasks_filrers.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/ui_download.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/ui_task_card.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/widget_classes.py" afterDir="false" />
+    <list default="true" id="16b2a115-02f1-46e4-baaf-07c4678b2512" name="Changes" comment="gt">
+      <change afterPath="$PROJECT_DIR$/Ui/service.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Ui/ui_car.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Ui/ui_car_brand.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Ui/ui_model_data.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Ui/ui_part.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Ui/ui_registration.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Ui/ui_task_card.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/car.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/car_brand.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/client.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/employee.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/model.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/order.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/part.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/service.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/NoteClass.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/Source/AddCollection.png" beforeDir="false" afterPath="$PROJECT_DIR$/Source/AddCollection.png" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/database.py" beforeDir="false" afterPath="$PROJECT_DIR$/database.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/firebase-sdk.json" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/firebase.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/Ui_company.py" beforeDir="false" afterPath="$PROJECT_DIR$/Ui/Ui_company.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Ui_employee.py" beforeDir="false" afterPath="$PROJECT_DIR$/Ui/Ui_employee.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/add_client.py" beforeDir="false" afterPath="$PROJECT_DIR$/Ui/add_client.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/add_task.py" beforeDir="false" afterPath="$PROJECT_DIR$/Ui/add_task.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/changeTask.py" beforeDir="false" afterPath="$PROJECT_DIR$/Ui/changeTask.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/company_filters.py" beforeDir="false" afterPath="$PROJECT_DIR$/Ui/company_filters.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/config.py" beforeDir="false" afterPath="$PROJECT_DIR$/config.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/database.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/employee_filters.py" beforeDir="false" afterPath="$PROJECT_DIR$/Ui/employee_filters.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/noteWidget.py" beforeDir="false" afterPath="$PROJECT_DIR$/noteWidget.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/notebd.db" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/ui_autorization.py" beforeDir="false" afterPath="$PROJECT_DIR$/ui_autorization.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/ui_functions.py" beforeDir="false" afterPath="$PROJECT_DIR$/ui_functions.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/ui_main.py" beforeDir="false" afterPath="$PROJECT_DIR$/ui_main.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/ui_note.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/tasks_filrers.py" beforeDir="false" afterPath="$PROJECT_DIR$/Ui/tasks_filrers.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ui_autorization.py" beforeDir="false" afterPath="$PROJECT_DIR$/Ui/ui_autorization.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ui_download.py" beforeDir="false" afterPath="$PROJECT_DIR$/Ui/ui_download.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ui_functions.py" beforeDir="false" afterPath="$PROJECT_DIR$/Ui/ui_functions.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ui_main.py" beforeDir="false" afterPath="$PROJECT_DIR$/Ui/ui_main.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ui_task_card.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/widget_classes.py" beforeDir="false" afterPath="$PROJECT_DIR$/widget_classes.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -43,6 +51,7 @@
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+    <option name="UPDATE_TYPE" value="REBASE" />
   </component>
   <component name="GitSEFilterConfiguration">
     <file-type-list>
@@ -56,18 +65,26 @@
     <option name="stateVersion" value="1" />
   </component>
   <component name="ProjectId" id="27CTFC6zPMP7GHgw8tRFkZGvYu2" />
-  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
+    <ConfirmationsSetting value="2" id="Add" />
+  </component>
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
   <component name="PropertiesComponent">
+    <property name="ASKED_ADD_EXTERNAL_FILES" value="true" />
     <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
     <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
     <property name="com.intellij.ide.scratch.ScratchImplUtil$2/New Scratch File" value="JSON" />
     <property name="last_opened_file_path" value="$PROJECT_DIR$" />
     <property name="settings.editor.selected.configurable" value="com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable" />
+  </component>
+  <component name="RecentsManager">
+    <key name="MoveFile.RECENT_KEYS">
+      <recent name="C:\Users\gosha\PycharmProjects\Just Notes\Ui" />
+    </key>
   </component>
   <component name="RunManager" selected="Python.main">
     <configuration name="database" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
@@ -166,7 +183,7 @@
       <option name="IS_MODULE_SDK" value="true" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
       <option name="ADD_SOURCE_ROOTS" value="true" />
-      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/ui_autorization.py" />
+      <option name="SCRIPT_NAME" value="C:\Users\gosha\PycharmProjects\Just Notes\Ui\ui_autorization.py" />
       <option name="PARAMETERS" value="" />
       <option name="SHOW_COMMAND_LINE" value="false" />
       <option name="EMULATE_TERMINAL" value="false" />
@@ -196,6 +213,14 @@
       <option name="INPUT_FILE" value="" />
       <method v="2" />
     </configuration>
+    <list>
+      <item itemvalue="Python.main" />
+      <item itemvalue="Python.database" />
+      <item itemvalue="Python.firebase" />
+      <item itemvalue="Python.hash_penos" />
+      <item itemvalue="Python.ui_autorization" />
+      <item itemvalue="Python.ui_registration" />
+    </list>
     <recent_temporary>
       <list>
         <item itemvalue="Python.database" />
Index: Ui/service.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Ui/service.py b/Ui/service.py
new file mode 100644
--- /dev/null	(date 1671650888707)
+++ b/Ui/service.py	(date 1671650888707)
@@ -0,0 +1,109 @@
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import QRect, QSize, QCoreApplication, QMetaObject
+from PyQt5.QtWidgets import QLineEdit, QFrame, QTextBrowser, QTextEdit
+
+
+class Ui_Service_form(object):
+    def setupUi(self, Service_form):
+        if not Service_form.objectName():
+            Service_form.setObjectName(u"Service_form")
+        Service_form.resize(1322, 132)
+        self.Service_frame = QFrame(Service_form)
+        self.Service_frame.setObjectName(u"Service_frame")
+        self.Service_frame.setGeometry(QRect(0, 0, 1281, 122))
+        self.Service_frame.setMinimumSize(QSize(1240, 122))
+        self.Service_frame.setMaximumSize(QSize(1281, 122))
+        self.Service_frame.setStyleSheet(u"background-color: rgb(36, 37, 39);\n"
+"border-style:solid ;\n"
+"    border-width: 2px;\n"
+"    border-color: rgb(123, 115, 27);\n"
+"border-radius: 15px;")
+        self.Service_frame.setFrameShape(QFrame.StyledPanel)
+        self.Service_frame.setFrameShadow(QFrame.Raised)
+        self.Name = QTextBrowser(self.Service_frame)
+        self.Name.setObjectName(u"Name")
+        self.Name.setGeometry(QRect(540, 10, 191, 41))
+        self.Name.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Address = QTextBrowser(self.Service_frame)
+        self.Address.setObjectName(u"Address")
+        self.Address.setGeometry(QRect(10, 70, 721, 41))
+        self.Address.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Address.setAutoFormatting(QTextEdit.AutoNone)
+        self.Phone = QTextBrowser(self.Service_frame)
+        self.Phone.setObjectName(u"Phone")
+        self.Phone.setGeometry(QRect(1010, 10, 251, 41))
+        self.Phone.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.ID = QTextBrowser(self.Service_frame)
+        self.ID.setObjectName(u"ID")
+        self.ID.setGeometry(QRect(10, 10, 31, 41))
+        self.ID.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Manager = QTextBrowser(self.Service_frame)
+        self.Manager.setObjectName(u"Manager")
+        self.Manager.setGeometry(QRect(1010, 70, 221, 41))
+        self.Manager.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.Manager.setAutoFormatting(QTextEdit.AutoNone)
+
+        self.retranslateUi(Service_form)
+
+        QMetaObject.connectSlotsByName(Service_form)
+    # setupUi
+
+    def retranslateUi(self, Service_form):
+        Service_form.setWindowTitle(QCoreApplication.translate("Service_form", u"Form", None))
+        self.Name.setHtml(QCoreApplication.translate("Service_form", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">Service_name</span></p></body></html>", None))
+        self.Address.setHtml(QCoreApplication.translate("Service_form", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">service_address</span></p></body></html>", None))
+        self.Phone.setHtml(QCoreApplication.translate("Service_form", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Tahoma'; font-size:16pt;\">service_phone_number</span></p></body></html>", None))
+        self.ID.setHtml(QCoreApplication.translate("Service_form", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Tahoma'; font-size:16pt;\">ID</span></p></body></html>", None))
+        self.Manager.setHtml(QCoreApplication.translate("Service_form", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">service_manager</span></p></body></html>", None))
+    # retranslateUi
+
Index: Ui/ui_registration.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Ui/ui_registration.py b/Ui/ui_registration.py
new file mode 100644
--- /dev/null	(date 1670026762022)
+++ b/Ui/ui_registration.py	(date 1670026762022)
@@ -0,0 +1,240 @@
+# -*- coding: utf-8 -*-
+
+################################################################################
+## Form generated from reading UI file 'registrationfeUnQe.ui'
+##
+## Created by: Qt User Interface Compiler version 6.2.3
+##
+## WARNING! All changes made in this file will be lost when recompiling UI file!
+################################################################################
+
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtWidgets import QLineEdit
+
+class Ui_Registration(object):
+    def setupUi(self, Registration):
+        if not Registration.objectName():
+            Registration.setObjectName(u"Registration")
+        Registration.resize(569, 700)
+        Registration.setMinimumSize(QtCore.QSize(569, 700))
+        Registration.setMaximumSize(QtCore.QSize(569, 700))
+        Registration.setStyleSheet(u"background-color: rgb(49, 49, 49);")
+        self.setting = QtWidgets.QTextBrowser(Registration)
+        self.setting.setObjectName(u"setting")
+        self.setting.setGeometry(QtCore.QRect(0, 20, 569, 81))
+        self.setting.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.gridLayoutWidget = QtWidgets.QWidget(Registration)
+        self.gridLayoutWidget.setObjectName(u"gridLayoutWidget")
+        self.gridLayoutWidget.setGeometry(QtCore.QRect(320, 160, 211, 461))
+        self.gridLayout1 = QtWidgets.QGridLayout(self.gridLayoutWidget)
+        self.gridLayout1.setObjectName(u"gridLayout1")
+        self.gridLayout1.setContentsMargins(0, 0, 0, 0)
+        self.lineEdit_f = QLineEdit(self.gridLayoutWidget)
+        self.lineEdit_f.setObjectName(u"lineEdit_f")
+        self.lineEdit_f.setEchoMode(QLineEdit.Password)
+        self.lineEdit_f.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+
+        self.gridLayout1.addWidget(self.lineEdit_f, 6, 0, 1, 1)
+
+        self.lineEdit_f_5 = QLineEdit(self.gridLayoutWidget)
+        self.lineEdit_f_5.setObjectName(u"lineEdit_f_5")
+        self.lineEdit_f_5.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+
+        self.gridLayout1.addWidget(self.lineEdit_f_5, 3, 0, 1, 1)
+
+        self.lineEdit_f_2 = QLineEdit(self.gridLayoutWidget)
+        self.lineEdit_f_2.setObjectName(u"lineEdit_f_2")
+        self.lineEdit_f_2.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+
+        self.gridLayout1.addWidget(self.lineEdit_f_2, 0, 0, 1, 1)
+
+        self.lineEdit_f_3 = QLineEdit(self.gridLayoutWidget)
+        self.lineEdit_f_3.setObjectName(u"lineEdit_f_3")
+        self.lineEdit_f_3.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+
+        self.gridLayout1.addWidget(self.lineEdit_f_3, 1, 0, 1, 1)
+
+        self.lineEditx = QLineEdit(self.gridLayoutWidget)
+        self.lineEditx.setObjectName(u"lineEditx")
+        self.lineEditx.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+
+        self.gridLayout1.addWidget(self.lineEditx, 5, 0, 1, 1)
+
+        self.lineEdit_f_4 = QLineEdit(self.gridLayoutWidget)
+        self.lineEdit_f_4.setObjectName(u"lineEdit_f_4")
+        self.lineEdit_f_4.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+
+        self.gridLayout1.addWidget(self.lineEdit_f_4, 2, 0, 1, 1)
+
+        self.reggg = QtWidgets.QPushButton(self.gridLayoutWidget)
+        self.reggg.setObjectName(u"reggg")
+        self.reggg.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"border-style:solid ;\n"
+"    border-width: 2px;\n"
+"    border-color: rgb(123, 115, 27);\n"
+"border-radius: 15px;")
+
+        self.gridLayout1.addWidget(self.reggg, 7, 0, 1, 1)
+
+        self.lineEdit_f_6 = QLineEdit(self.gridLayoutWidget)
+        self.lineEdit_f_6.setObjectName(u"lineEdit_f_6")
+        self.lineEdit_f_6.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(36, 37, 39);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+
+        self.gridLayout1.addWidget(self.lineEdit_f_6, 4, 0, 1, 1)
+
+        self.reggi = QtWidgets.QTextBrowser(Registration)
+        self.reggi.setObjectName(u"reggi")
+        self.reggi.setGeometry(QtCore.QRect(300, 110, 251, 41))
+        self.reggi.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(49, 49, 49);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.radioButton = QtWidgets.QRadioButton(Registration)
+        self.radioButton.setObjectName(u"radioButton")
+        self.radioButton.setGeometry(QtCore.QRect(50, 160, 16, 51))
+        self.radioButton.setChecked(True)
+        self.radioButton.role = "Manager"
+        self.role = QtWidgets.QTextBrowser(Registration)
+        self.role.setObjectName(u"role")
+        self.role.setGeometry(QtCore.QRect(10, 110, 251, 41))
+        self.role.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(49, 49, 49);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.manager = QtWidgets.QTextBrowser(Registration)
+        self.manager.setObjectName(u"manager")
+        self.manager.setGeometry(QtCore.QRect(72, 170, 191, 41))
+        self.manager.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(49, 49, 49);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+        self.radioButton_2 = QtWidgets.QRadioButton(Registration)
+        self.radioButton_2.setObjectName(u"radioButton_2")
+        self.radioButton_2.setGeometry(QtCore.QRect(50, 250, 16, 51))
+        self.radioButton.role = "Employee"
+
+
+        self.employee = QtWidgets.QTextBrowser(Registration)
+        self.employee.setObjectName(u"employee")
+        self.employee.setGeometry(QtCore.QRect(80, 250, 191, 41))
+        self.employee.setStyleSheet(u"text-align: center;\n"
+"font-family: Myriad Pro;\n"
+"color: rgb(123, 115, 27);\n"
+"font-size:25px;;\n"
+"background-color: rgb(49, 49, 49);\n"
+"text-decorations: none;\n"
+"border-style:none ;")
+
+        self.retranslateUi(Registration)
+
+        QtCore.QMetaObject.connectSlotsByName(Registration)
+    # setupUi
+
+    def retranslateUi(self, Registration):
+        Registration.setWindowTitle(QtCore.QCoreApplication.translate("Registration", u"Form", None))
+        self.setting.setHtml(QtCore.QCoreApplication.translate("Registration", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Tahoma'; font-size:22pt;\">PROFILE</span></p></body></html>", None))
+        self.lineEdit_f.setText(QtCore.QCoreApplication.translate("Registration", u"", None))
+        self.lineEdit_f.setPlaceholderText("Password")
+        self.lineEdit_f_5.setText(QtCore.QCoreApplication.translate("Registration", u"", None))
+        self.lineEdit_f_5.setPlaceholderText("Phone")
+        self.lineEdit_f_2.setText(QtCore.QCoreApplication.translate("Registration", u"", None))
+        self.lineEdit_f_2.setPlaceholderText("First Name")
+        self.lineEdit_f_3.setText(QtCore.QCoreApplication.translate("Registration", u"", None))
+        self.lineEdit_f_3.setPlaceholderText("Second Name")
+        self.lineEditx.setInputMask("")
+        self.lineEditx.setText(QtCore.QCoreApplication.translate("Registration", u"", None))
+        self.lineEditx.setPlaceholderText("Username")
+        self.lineEdit_f_4.setText(QtCore.QCoreApplication.translate("Registration", u"", None))
+        self.lineEdit_f_4.setPlaceholderText("Patronymic")
+        self.reggg.setText(QtCore.QCoreApplication.translate("Registration", u"Registration", None))
+        self.lineEdit_f_6.setText(QtCore.QCoreApplication.translate("Registration", u"", None))
+        self.lineEdit_f_6.setPlaceholderText("Email")
+        self.reggi.setHtml(QtCore.QCoreApplication.translate("Registration", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">DATA</span></p></body></html>", None))
+        self.radioButton.setText("")
+        self.role.setHtml(QtCore.QCoreApplication.translate("Registration", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">ROLE</span></p></body></html>", None))
+        self.manager.setHtml(QtCore.QCoreApplication.translate("Registration", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">Manager</span></p></body></html>", None))
+        self.radioButton_2.setText("")
+        self.employee.setHtml(QtCore.QCoreApplication.translate("Registration", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'Myriad Pro'; font-size:25px; font-weight:400; font-style:normal;\">\n"
+"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:25px;\">Employee</span></p></body></html>", None))
+    # retranslateUi
+
Index: ui_main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ui_main.py b/Ui/ui_main.py
rename from ui_main.py
rename to Ui/ui_main.py
--- a/ui_main.py	(revision e7aa5931294875417ca4344f4f8f31b388789013)
+++ b/Ui/ui_main.py	(date 1671639252684)
@@ -38,10 +38,12 @@
         self.frame.setStyleSheet(u"background-color: rgb(36, 37, 39);")
         self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
         self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
+
+
         self.Show_tasks = QtWidgets.QPushButton(self.frame)
         self.Show_tasks.setObjectName(u"Show_tasks")
         self.Show_tasks.setEnabled(True)
-        self.Show_tasks.setGeometry(QtCore.QRect(14, 245, 65, 65))
+        self.Show_tasks.setGeometry(QtCore.QRect(14, 145, 65, 65))
         sizePolicy1 = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Ignored)
         sizePolicy1.setHorizontalStretch(0)
         sizePolicy1.setVerticalStretch(0)
@@ -58,36 +60,82 @@
         self.Show_tasks.setIcon(icon)
         self.Show_tasks.setIconSize(QtCore.QSize(35, 35))
 
-        self.Refresh = QtWidgets.QPushButton(self.frame)
-        self.Refresh.setObjectName(u"Refresh")
-        self.Refresh.setEnabled(True)
-        self.Refresh.setGeometry(QtCore.QRect(14, 26, 65, 65))
-        sizePolicy1 = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Ignored)
-        sizePolicy1.setHorizontalStretch(0)
-        sizePolicy1.setVerticalStretch(0)
-        sizePolicy1.setHeightForWidth(self.Refresh.sizePolicy().hasHeightForWidth())
-        self.Refresh.setSizePolicy(sizePolicy1)
-        self.Refresh.setAutoFillBackground(False)
-        self.Refresh.setStyleSheet(u"QPushButton{\n"
+        #1430
+
+        self.Show_car = QtWidgets.QPushButton(self.centralwidget)
+        self.Show_car.setObjectName(u"Filter")
+        self.Show_car.setGeometry(QtCore.QRect(1430, 73, 65, 65))
+        self.Show_car.setAutoFillBackground(False)
+        self.Show_car.setStyleSheet(u"background-color: rgb(123, 115, 27);\n"
+                                  "border-radius: 32px;")
+        icon3 = QtGui.QIcon()
+        icon3.addFile(u"C:/Users/gosha/PycharmProjects/Just Notes/Source/Car.png", QtCore.QSize(),
+                      QtGui.QIcon.Normal, QtGui.QIcon.Off)
+        self.Show_car.setIcon(icon3)
+        self.Show_car.setIconSize(QtCore.QSize(45, 45))
+
+        self.Show_car_brand = QtWidgets.QPushButton(self.centralwidget)
+        self.Show_car_brand.setObjectName(u"Filter")
+        self.Show_car_brand.setGeometry(QtCore.QRect(1430, 173, 65, 65))
+        self.Show_car_brand.setAutoFillBackground(False)
+        self.Show_car_brand.setStyleSheet(u"background-color: rgb(123, 115, 27);\n"
+                                    "border-radius: 32px;")
+        icon3 = QtGui.QIcon()
+        icon3.addFile(u"C:/Users/gosha/PycharmProjects/Just Notes/Source/Brand.png", QtCore.QSize(),
+                      QtGui.QIcon.Normal, QtGui.QIcon.Off)
+        self.Show_car_brand.setIcon(icon3)
+        self.Show_car_brand.setIconSize(QtCore.QSize(45, 45))
+
+        self.Show_model_data = QtWidgets.QPushButton(self.centralwidget)
+        self.Show_model_data.setObjectName(u"Filter")
+        self.Show_model_data.setGeometry(QtCore.QRect(1430, 273, 65, 65))
+        self.Show_model_data.setAutoFillBackground(False)
+        self.Show_model_data.setStyleSheet(u"background-color: rgb(123, 115, 27);\n"
+                                          "border-radius: 32px;")
+        icon3 = QtGui.QIcon()
+        icon3.addFile(u"C:/Users/gosha/PycharmProjects/Just Notes/Source/Model.png", QtCore.QSize(),
+                      QtGui.QIcon.Normal, QtGui.QIcon.Off)
+        self.Show_model_data.setIcon(icon3)
+        self.Show_model_data.setIconSize(QtCore.QSize(45, 45))
+
+        self.Show_parts = QtWidgets.QPushButton(self.centralwidget)
+        self.Show_parts.setObjectName(u"Filter")
+        self.Show_parts.setGeometry(QtCore.QRect(1430, 373, 65, 65))
+        self.Show_parts.setAutoFillBackground(False)
+        self.Show_parts.setStyleSheet(u"background-color: rgb(123, 115, 27);\n"
+                                           "border-radius: 32px;")
+        icon3 = QtGui.QIcon()
+        icon3.addFile(u"C:/Users/gosha/PycharmProjects/Just Notes/Source/Parts.png", QtCore.QSize(),
+                      QtGui.QIcon.Normal, QtGui.QIcon.Off)
+        self.Show_parts.setIcon(icon3)
+        self.Show_parts.setIconSize(QtCore.QSize(45, 45))
+
+        self.Show_service = QtWidgets.QPushButton(self.frame)
+        self.Show_service.setObjectName(u"Refresh")
+        self.Show_service.setEnabled(True)
+        self.Show_service.setGeometry(QtCore.QRect(14, 45, 65, 65))
+        self.Show_service.setSizePolicy(sizePolicy1)
+        self.Show_service.setAutoFillBackground(False)
+        self.Show_service.setStyleSheet(u"QPushButton{\n"
                                       "	background-color: rgb(123, 115, 27);\n"
                                       "	border-radius: 32px;\n"
                                       "}\n"
                                       "")
         icon = QtGui.QIcon()
-        icon.addFile(u"C:/Users/gosha/PycharmProjects/Just Notes/Source/UPDATE.png", QtCore.QSize(),
+        icon.addFile(u"C:/Users/gosha/PycharmProjects/Just Notes/Source/Service.png", QtCore.QSize(),
                      QtGui.QIcon.Normal, QtGui.QIcon.Off)
-        self.Refresh.setIcon(icon)
-        self.Refresh.setIconSize(QtCore.QSize(45, 45))
+        self.Show_service.setIcon(icon)
+        self.Show_service.setIconSize(QtCore.QSize(45, 45))
 
 
         self.Show_employee = QtWidgets.QPushButton(self.frame)
         self.Show_employee.setObjectName(u"Show_employee")
-        self.Show_employee.setGeometry(QtCore.QRect(14, 345, 65, 65))
+        self.Show_employee.setGeometry(QtCore.QRect(14, 245, 65, 65))
         self.Show_employee.setAutoFillBackground(False)
         self.Show_employee.setStyleSheet(u"background-color: rgb(123, 115, 27);\n"
 "border-radius: 32px;")
         icon8 = QtGui.QIcon()
-        icon8.addFile(u"C:/Users/gosha/PycharmProjects/Just Notes/Source/Employee.png", QtCore.QSize(), QtGui.QIcon.Normal, QtGui.QIcon.Off)
+        icon8.addFile(u"C:/Users/gosha/PycharmProjects/Just Notes/Source/Clients.png", QtCore.QSize(), QtGui.QIcon.Normal, QtGui.QIcon.Off)
         self.Show_employee.setIcon(icon8)
         self.Show_employee.setIconSize(QtCore.QSize(45, 45))
         self.Settings_button = QtWidgets.QPushButton(self.frame)
@@ -104,17 +152,17 @@
         self.Settings_button.setIconSize(QtCore.QSize(35, 35))
         self.Show_clients = QtWidgets.QPushButton(self.frame)
         self.Show_clients.setObjectName(u"Show_clients")
-        self.Show_clients.setGeometry(QtCore.QRect(14, 445, 65, 65))
+        self.Show_clients.setGeometry(QtCore.QRect(14, 345, 65, 65))
         self.Show_clients.setAutoFillBackground(False)
         self.Show_clients.setStyleSheet(u"background-color: rgb(123, 115, 27);\n"
 "border-radius: 32px;")
         self.Show_clients.setIcon(icon8)
         self.Show_clients.setIconSize(QtCore.QSize(45, 45))
         icon7 = QtGui.QIcon()
-        icon7.addFile(u"C:/Users/gosha/PycharmProjects/Just Notes/Source/Clients.png", QtCore.QSize(),
+        icon7.addFile(u"C:/Users/gosha/PycharmProjects/Just Notes/Source/Employee.png", QtCore.QSize(),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
         self.Show_clients.setIcon(icon7)
-        self.Show_clients.setIconSize(QtCore.QSize(35, 35))
+        self.Show_clients.setIconSize(QtCore.QSize(45, 45))
         self.frame_2 = QtWidgets.QFrame(self.centralwidget)
         self.frame_2.setObjectName(u"frame_2")
         self.frame_2.setGeometry(QtCore.QRect(93, 26, 2, 1083))
@@ -129,7 +177,7 @@
         self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
         self.Filter = QtWidgets.QPushButton(self.centralwidget)
         self.Filter.setObjectName(u"Filter")
-        self.Filter.setGeometry(QtCore.QRect(1430, 810, 65, 65))
+        self.Filter.setGeometry(QtCore.QRect(1430, 808, 65, 65))
         self.Filter.setAutoFillBackground(False)
         self.Filter.setStyleSheet(u"background-color: rgb(123, 115, 27);\n"
 "border-radius: 32px;")
@@ -266,7 +314,7 @@
         self.scrollArea.setWidget(self.scrollAreaWidgetContents)
         self.Add_task = QtWidgets.QPushButton(self.centralwidget)
         self.Add_task.setObjectName(u"Add_task")
-        self.Add_task.setGeometry(QtCore.QRect(1430, 610, 65, 65))
+        self.Add_task.setGeometry(QtCore.QRect(1430, 608, 65, 65))
         self.Add_task.setAutoFillBackground(False)
         self.Add_task.setStyleSheet(u"background-color: rgb(123, 115, 27);\n"
 "border-radius: 32px;")
@@ -276,7 +324,7 @@
         self.Add_task.setIconSize(QtCore.QSize(55, 55))
         self.Download = QtWidgets.QPushButton(self.centralwidget)
         self.Download.setObjectName(u"Download")
-        self.Download.setGeometry(QtCore.QRect(1430, 710, 65, 65))
+        self.Download.setGeometry(QtCore.QRect(1430, 708, 65, 65))
         self.Download.setAutoFillBackground(False)
         self.Download.setStyleSheet(u"background-color: rgb(123, 115, 27);\n"
 "border-radius: 32px;")
diff --git a/ui_download.py b/Ui/ui_download.py
rename from ui_download.py
rename to Ui/ui_download.py
diff --git a/tasks_filrers.py b/Ui/tasks_filrers.py
rename from tasks_filrers.py
rename to Ui/tasks_filrers.py
diff --git a/employee_filters.py b/Ui/employee_filters.py
rename from employee_filters.py
rename to Ui/employee_filters.py
diff --git a/company_filters.py b/Ui/company_filters.py
rename from company_filters.py
rename to Ui/company_filters.py
diff --git a/Ui_employee.py b/Ui/Ui_employee.py
rename from Ui_employee.py
rename to Ui/Ui_employee.py
diff --git a/Ui_company.py b/Ui/Ui_company.py
rename from Ui_company.py
rename to Ui/Ui_company.py
diff --git a/ui_autorization.py b/Ui/ui_autorization.py
rename from ui_autorization.py
rename to Ui/ui_autorization.py
diff --git a/car.py b/car.py
new file mode 100644
diff --git a/model.py b/model.py
new file mode 100644
diff --git a/car_brand.py b/car_brand.py
new file mode 100644
diff --git a/service.py b/service.py
new file mode 100644
diff --git a/part.py b/part.py
new file mode 100644
